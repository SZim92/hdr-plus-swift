name: Release Candidate Testing

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release candidate version (e.g., 1.2.0-rc.1)'
        required: true
        type: string
      expire_days:
        description: 'Days until release candidate expires'
        required: false
        default: '7'
        type: string
      notify:
        description: 'Send notifications about the release candidate'
        required: false
        default: true
        type: boolean

jobs:
  validate:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse.outputs.version }}
      major: ${{ steps.parse.outputs.major }}
      minor: ${{ steps.parse.outputs.minor }}
      patch: ${{ steps.parse.outputs.patch }}
      rc: ${{ steps.parse.outputs.rc }}
      expire_date: ${{ steps.parse.outputs.expire_date }}
      branch_name: ${{ steps.parse.outputs.branch_name }}
    
    steps:
      - name: Parse version
        id: parse
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Validate format
          if ! [[ $VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)-rc\.([0-9]+)$ ]]; then
            echo "::error::Invalid version format. Expected: X.Y.Z-rc.N (e.g. 1.2.0-rc.1)"
            exit 1
          fi
          
          # Extract components
          MAJOR="${BASH_REMATCH[1]}"
          MINOR="${BASH_REMATCH[2]}"
          PATCH="${BASH_REMATCH[3]}"
          RC="${BASH_REMATCH[4]}"
          
          # Calculate expiration date
          EXPIRE_DAYS="${{ github.event.inputs.expire_days }}"
          EXPIRE_DATE=$(date -d "+$EXPIRE_DAYS days" "+%Y-%m-%d")
          
          # Set branch name
          BRANCH_NAME="release/$MAJOR.$MINOR.$PATCH"
          
          # Set outputs
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT
          echo "rc=$RC" >> $GITHUB_OUTPUT
          echo "expire_date=$EXPIRE_DATE" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          echo "Release candidate: v$VERSION"
          echo "Components: $MAJOR.$MINOR.$PATCH-rc.$RC"
          echo "Expires on: $EXPIRE_DATE"
          echo "Branch: $BRANCH_NAME"

  prepare:
    name: Prepare Release Branch
    needs: validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Create or update release branch
        run: |
          BRANCH_NAME="${{ needs.validate.outputs.branch_name }}"
          
          # Check if branch exists
          if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
            echo "Branch $BRANCH_NAME already exists, checking it out"
            git checkout $BRANCH_NAME
            git pull origin $BRANCH_NAME
          else
            echo "Creating new branch $BRANCH_NAME from main"
            git checkout main
            git pull origin main
            git checkout -b $BRANCH_NAME
          fi
      
      - name: Update version files
        run: |
          # Version information
          VERSION="${{ needs.validate.outputs.version }}"
          MAJOR="${{ needs.validate.outputs.major }}"
          MINOR="${{ needs.validate.outputs.minor }}"
          PATCH="${{ needs.validate.outputs.patch }}"
          RC="${{ needs.validate.outputs.rc }}"
          EXPIRE_DATE="${{ needs.validate.outputs.expire_date }}"
          
          # Create or update version file
          cat > .github/VERSION << EOF
          VERSION=$VERSION
          MAJOR=$MAJOR
          MINOR=$MINOR
          PATCH=$PATCH
          RC=$RC
          IS_RELEASE_CANDIDATE=true
          BUILD_DATE=$(date -Iseconds)
          EXPIRE_DATE=$EXPIRE_DATE
          EOF
          
          # Update Swift version file if it exists
          if [ -f "Sources/Version.swift" ]; then
            cat > Sources/Version.swift << EOF
          // Automatically generated by CI system - do not modify manually
          enum Version {
              static let major = $MAJOR
              static let minor = $MINOR
              static let patch = $PATCH
              static let rc = $RC
              static let isReleaseCandidate = true
              static let string = "$VERSION"
              static let buildDate = "$(date -Iseconds)"
              static let expireDate = "$EXPIRE_DATE"
          }
          EOF
          fi
          
          git add .github/VERSION
          if [ -f "Sources/Version.swift" ]; then
            git add Sources/Version.swift
          fi
          
          git commit -m "chore: update version to $VERSION" || echo "No changes to commit"
      
      - name: Push changes
        run: |
          git push origin ${{ needs.validate.outputs.branch_name }}

  build-and-test:
    name: Test Release Candidate
    needs: [validate, prepare]
    runs-on: macos-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.branch_name }}
      
      - name: Set up Swift environment
        uses: ./.github/actions/setup-swift
        with:
          xcode-version: latest
      
      - name: Set up build cache
        uses: ./.github/actions/build-cache
      
      - name: Build and test
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          echo "Building release candidate v$VERSION"
          
          # Check if Swift Package Manager or Xcode project
          if [ -f "Package.swift" ]; then
            echo "Building Swift package..."
            swift build -c release
            
            echo "Running tests..."
            swift test
          
          elif [ -d "*.xcodeproj" ]; then
            echo "Building Xcode project..."
            xcodebuild -scheme "$(ls *.xcodeproj | sed 's/\.xcodeproj//')" \
              -configuration Release \
              -destination "platform=iOS Simulator,name=iPhone 15" \
              build
            
            echo "Running tests..."
            xcodebuild -scheme "$(ls *.xcodeproj | sed 's/\.xcodeproj//')" \
              -configuration Release \
              -destination "platform=iOS Simulator,name=iPhone 15" \
              test
          else
            echo "No recognizable project structure found."
            exit 1
          fi
      
      - name: Generate artifacts
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Create artifacts directory
          mkdir -p artifacts
          
          # Create version info file
          cat > artifacts/VERSION.txt << EOF
          HDR+ Swift Release Candidate
          ==========================
          Version: $VERSION
          Build date: $(date -Iseconds)
          Expires on: ${{ needs.validate.outputs.expire_date }}
          
          THIS IS A PRE-RELEASE VERSION FOR TESTING ONLY
          NOT FOR PRODUCTION USE
          EOF
          
          # Add build artifacts based on project type
          if [ -f "Package.swift" ]; then
            # Swift package - copy the build products
            cp -r .build/release/* artifacts/
          elif [ -d "*.xcodeproj" ]; then
            # Xcode project - export an archive
            xcodebuild -scheme "$(ls *.xcodeproj | sed 's/\.xcodeproj//')" \
              -archivePath artifacts/app.xcarchive \
              archive
          fi
          
          # Create a zip file
          cd artifacts
          zip -r ../HDR-Swift-RC-$VERSION.zip .
          cd ..
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-candidate-${{ needs.validate.outputs.version }}
          path: HDR-Swift-RC-${{ needs.validate.outputs.version }}.zip
          retention-days: ${{ github.event.inputs.expire_days }}

  notify:
    name: Notify Team
    needs: [validate, build-and-test]
    runs-on: ubuntu-latest
    if: github.event.inputs.notify == 'true'
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Generate release notes
        id: notes
        uses: ./.github/actions/generate-changelog
        with:
          to-tag: ${{ needs.validate.outputs.branch_name }}
          group-by-type: true
          output-file: release-notes.md
      
      - name: Create announcement
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          cat > announcement.md << EOF
          # Release Candidate v$VERSION Now Available
          
          A new release candidate (v$VERSION) is now available for testing.
          
          ## Important Information
          
          - **Version:** $VERSION
          - **Expires:** ${{ needs.validate.outputs.expire_date }}
          - **Branch:** ${{ needs.validate.outputs.branch_name }}
          
          ## What's New
          
          $(cat release-notes.md)
          
          ## How to Test
          
          You can download the release candidate artifacts from the GitHub Actions run: 
          ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}
          
          Please report any issues you find during testing.
          
          ## Next Steps
          
          If no issues are found during testing, v${{ needs.validate.outputs.major }}.${{ needs.validate.outputs.minor }}.${{ needs.validate.outputs.patch }} will be released after the testing period.
          EOF
      
      - name: Send Slack notification
        uses: ./.github/actions/notify-slack
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel: releases
          status: success
          title: "Release Candidate v${{ needs.validate.outputs.version }} Available"
          message: "A new release candidate (v${{ needs.validate.outputs.version }}) is now available for testing. It will expire on ${{ needs.validate.outputs.expire_date }}."
          footer: "Download from GitHub Actions | Testing Required" 