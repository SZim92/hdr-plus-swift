name: Swift Warning Tracker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Set explicit permissions
permissions:
  contents: read
  pull-requests: write  # Needed for commenting on PRs
  checks: write         # Needed for creating check runs

# Prevent concurrent runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  track-warnings:
    name: Track Swift Compiler Warnings
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Swift environment
        id: swift-setup
        uses: ./.github/actions/optimized-swift-setup
        with:
          cache-name: 'warning-tracker'
          
      # Add Swift version verification step
      - name: Verify Swift installation
        id: swift-verify
        continue-on-error: true  # Don't fail the workflow if this step fails
        run: |
          echo "Verifying Swift installation..."
          
          # Simple test of Swift environment
          if ! swift --version > swift-version.log 2>&1; then
            echo "::warning::Swift installation check failed. See logs for details."
            cat swift-version.log || echo "No log available"
            echo "swift_working=false" >> $GITHUB_OUTPUT
          else
            SWIFT_VERSION=$(grep -o 'Swift version [0-9.]*' swift-version.log | head -1 || echo "Unknown")
            echo "Swift installation verified: $SWIFT_VERSION"
            echo "swift_working=true" >> $GITHUB_OUTPUT
          fi
          
          # Check Xcode availability
          if ! /usr/bin/xcrun xcodebuild -version > xcode-version.log 2>&1; then
            echo "::warning::Xcode check failed. See logs for details."
            cat xcode-version.log || echo "No log available"
            echo "xcode_working=false" >> $GITHUB_OUTPUT
          else
            XCODE_VERSION=$(grep 'Xcode' xcode-version.log | head -1 || echo "Unknown")
            echo "Xcode installation verified: $XCODE_VERSION"
            echo "xcode_working=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Check for cached warning data
        id: cache-warnings
        uses: actions/cache@v4
        with:
          path: |
            warning-history
            previous-warnings.txt
          key: swift-warnings-${{ github.repository }}-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            swift-warnings-${{ github.repository }}-${{ github.ref_name }}-
            swift-warnings-${{ github.repository }}-main-
          
      # Add a pre-build verification step
      - name: Pre-build verification
        id: pre-build
        continue-on-error: true  # Don't fail the workflow if this step fails
        run: |
          echo "Performing pre-build verification..."
          
          # Check for xcodebuild command
          if command -v xcodebuild >/dev/null 2>&1; then
            # Test xcodebuild with minimal options to see if it's working correctly
            /usr/bin/xcrun xcodebuild -list > xcodebuild-list.log 2>&1 || true
            
            if [ -s "xcodebuild-list.log" ] && ! grep -q "error:" xcodebuild-list.log; then
              echo "xcodebuild verification successful"
              echo "xcodebuild_working=true" >> $GITHUB_OUTPUT
            else
              echo "::warning::xcodebuild verification failed - error in output"
              echo "xcodebuild_working=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "::warning::xcodebuild command not found"
            echo "xcodebuild_working=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Track Swift compiler warnings
        id: track-warnings
        env:
          XCODEBUILD_WORKING: ${{ steps.pre-build.outputs.xcodebuild_working || 'false' }}
        run: |
          echo "Tracking Swift compiler warnings..."
          
          # Create directories
          mkdir -p warning-reports
          mkdir -p warning-history
          
          # Set default values for variables
          TOTAL_WARNINGS=0
          BUILD_SUCCESS=false
          touch warning-reports/all-warnings.txt
          
          # Create an initial report in case the build fails
          echo "# Swift Compiler Warning Report" > warning-reports/report.md
          echo "" >> warning-reports/report.md
          echo "Generated on $(date)" >> warning-reports/report.md
          echo "" >> warning-reports/report.md
          
          # Add environment information
          echo "## Environment" >> warning-reports/report.md
          echo "" >> warning-reports/report.md
          
          if [ -f "swift-version.log" ]; then
            echo "Swift version: $(cat swift-version.log | head -1 || echo 'Not available')" >> warning-reports/report.md
          else
            echo "Swift version: Not available" >> warning-reports/report.md
          fi
          
          if [ -f "xcode-version.log" ]; then
            echo "Xcode version: $(cat xcode-version.log | head -1 || echo 'Not available')" >> warning-reports/report.md
          else
            echo "Xcode version: Not available" >> warning-reports/report.md
          fi
          
          echo "" >> warning-reports/report.md
          
          # Run build with warnings output and protect against failures
          if [ -d "burstphoto.xcodeproj" ]; then
            echo "Building project to analyze warnings..."
            
            # Skip build if xcodebuild is not working properly
            if [ "$XCODEBUILD_WORKING" != "true" ]; then
              echo "::warning::Skipping build due to xcodebuild verification failure"
              BUILD_SUCCESS=false
              
              # Create a minimal warnings file to prevent failures in remaining steps
              echo "N/A:0:0: warning: Build skipped due to xcodebuild issues" > warning-reports/all-warnings.txt
              TOTAL_WARNINGS=0
            else
              # Run xcodebuild directly to a file to avoid pipe issues
              echo "Running xcodebuild..."
              /usr/bin/xcrun xcodebuild build \
                -project burstphoto.xcodeproj \
                -scheme gui \
                -destination "platform=macOS" \
                OTHER_SWIFT_FLAGS="-warnings-as-errors" \
                > build.log 2>&1 || echo "Build exited with non-zero status (expected with -warnings-as-errors)"
              
              echo "Build command completed"
              
              # Check if we have a build log with useful content
              if [ -s "build.log" ]; then
                echo "Processing build log for warnings..."
                BUILD_SUCCESS=true
                
                # Extract warnings
                grep "warning:" build.log > warning-reports/all-warnings.txt || true
                
                # Count total warnings
                TOTAL_WARNINGS=$(grep -c "warning:" build.log || echo "0")
                echo "Total warnings: $TOTAL_WARNINGS"
              else
                echo "::warning::No build log was generated or it's empty"
                # Create a synthetic warning report
                echo "N/A:0:0: warning: Unable to generate build log" > warning-reports/all-warnings.txt
                TOTAL_WARNINGS=1
                BUILD_SUCCESS=false
              fi
            fi
          else
            echo "::warning::Xcode project not found at expected location"
            # Create a synthetic warning report
            echo "N/A:0:0: warning: Xcode project not found" > warning-reports/all-warnings.txt
            TOTAL_WARNINGS=1
            BUILD_SUCCESS=false
          fi
          
          # Update the report with summary information
          echo "## Summary" >> warning-reports/report.md
          echo "" >> warning-reports/report.md
          
          if [ "$BUILD_SUCCESS" == "true" ]; then
            echo "Build status: ✅ Completed" >> warning-reports/report.md
          else
            echo "Build status: ❌ Failed or skipped" >> warning-reports/report.md
            echo "Note: Warning analysis may be incomplete." >> warning-reports/report.md
          fi
          
          echo "Total warnings: **$TOTAL_WARNINGS**" >> warning-reports/report.md
          
          # Add warning counts by file
          echo "" >> warning-reports/report.md
          echo "## Warnings by File" >> warning-reports/report.md
          echo "" >> warning-reports/report.md
          
          if [ -s "build.log" ]; then
            grep "warning:" build.log | grep -o '[^/]*\.swift:[0-9]*:[0-9]*' | sort | uniq -c | sort -nr > warning-reports/by-file.txt || true
            
            if [ -s warning-reports/by-file.txt ]; then
              echo "| Count | File |" >> warning-reports/report.md
              echo "|-------|------|" >> warning-reports/report.md
              while read -r line; do
                COUNT=$(echo "$line" | awk '{print $1}')
                FILE=$(echo "$line" | awk '{$1=""; print $0}' | xargs)
                echo "| $COUNT | \`$FILE\` |" >> warning-reports/report.md
              done < warning-reports/by-file.txt
            else
              echo "No warnings detected by file." >> warning-reports/report.md
            fi
          else
            echo "Build log not available for detailed analysis." >> warning-reports/report.md
          fi
          
          # Add warning counts by type
          echo "" >> warning-reports/report.md
          echo "## Warnings by Type" >> warning-reports/report.md
          echo "" >> warning-reports/report.md
          
          if [ -s "build.log" ]; then
            grep "warning:" build.log | sed 's/.*warning: \(.*\)/\1/' | sort | uniq -c | sort -nr > warning-reports/by-type.txt || true
            
            if [ -s warning-reports/by-type.txt ]; then
              echo "| Count | Warning Type |" >> warning-reports/report.md
              echo "|-------|-------------|" >> warning-reports/report.md
              while read -r line; do
                COUNT=$(echo "$line" | awk '{print $1}')
                TYPE=$(echo "$line" | awk '{$1=""; print $0}' | xargs)
                echo "| $COUNT | $TYPE |" >> warning-reports/report.md
              done < warning-reports/by-type.txt
            else
              echo "No warnings detected by type." >> warning-reports/report.md
            fi
          else
            echo "Build log not available for detailed analysis." >> warning-reports/report.md
          fi
          
          # Copy current warnings for next time
          cp warning-reports/all-warnings.txt previous-warnings.txt

      - name: Upload warning report
        uses: actions/upload-artifact@v4
        with:
          name: swift-warning-report
          path: warning-reports/
          retention-days: 14
          
      - name: Add report to GitHub step summary
        run: |
          if [ -f "warning-reports/report.md" ]; then
            cat warning-reports/report.md >> $GITHUB_STEP_SUMMARY
          else
            echo "## Warning Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Error: Could not generate warning report." >> $GITHUB_STEP_SUMMARY
          fi 