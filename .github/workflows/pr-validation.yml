name: PR Validation

on:
  pull_request:
    branches: [ main ]

jobs:
  # Verify PR title follows conventional commits format
  pr-title-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject must start with a lowercase letter.
            
            Examples:
              - feat: add new feature
              - fix: resolve critical bug
              - docs: improve documentation
  
  # Analyze PR content and provide feedback
  pr-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Analyze PR size
        id: pr_size
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            let totalChanges = 0;
            let fileCount = files.length;
            let fileTypes = new Set();
            let largeFiles = [];
            
            files.forEach(file => {
              const changes = file.additions + file.deletions;
              totalChanges += changes;
              fileTypes.add(file.filename.split('.').pop());
              
              if (changes > 300) {
                largeFiles.push({name: file.filename, changes});
              }
            });
            
            // Determine the size category
            let sizeCategory = '';
            if (totalChanges < 100) sizeCategory = 'xs';
            else if (totalChanges < 300) sizeCategory = 'small';
            else if (totalChanges < 1000) sizeCategory = 'medium';
            else if (totalChanges < 2000) sizeCategory = 'large';
            else sizeCategory = 'xl';
            
            core.setOutput('size_category', sizeCategory);
            core.setOutput('total_changes', totalChanges);
            core.setOutput('file_count', fileCount);
            
            // Create a pull request comment with analysis
            let comment = '## PR Analysis\n\n';
            comment += '| Metric | Value |\n';
            comment += '|--------|-------|\n';
            comment += `| Size | ${sizeCategory.toUpperCase()} (${totalChanges} lines changed) |\n`;
            comment += `| Files Changed | ${fileCount} |\n`;
            comment += `| File Types | ${Array.from(fileTypes).join(', ')} |\n`;
            
            // Add recommendations based on size
            comment += '\n### Recommendations\n\n';
            
            if (sizeCategory === 'large' || sizeCategory === 'xl') {
              comment += '- 🔍 **Consider breaking this PR into smaller ones**\n';
              comment += '- 👥 **Request careful review** from experienced reviewers\n';
            }
            
            if (largeFiles.length > 0) {
              comment += '\n### Large Files\n\n';
              comment += 'The following files have significant changes and may need extra attention:\n';
              largeFiles.forEach(file => {
                comment += `- \`${file.name}\` (${file.changes} lines)\n`;
              });
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            // Add a label based on size
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: [`size/${sizeCategory}`]
            });

      - name: Get PR Files
        id: pr_files
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const swiftFiles = files.filter(file => file.filename.endsWith('.swift'));
            const hasSwiftFiles = swiftFiles.length > 0;
            
            core.setOutput('has_swift_files', hasSwiftFiles ? 'true' : 'false');
            
            // Check if any tests were modified
            const testFiles = files.filter(file => file.filename.includes('test') || file.filename.includes('Test'));
            core.setOutput('has_test_files', testFiles.length > 0 ? 'true' : 'false');
            
            // Check if documentation was updated
            const docFiles = files.filter(file => 
              file.filename.endsWith('.md') || 
              file.filename.includes('doc') || 
              file.filename.includes('Doc')
            );
            core.setOutput('has_doc_files', docFiles.length > 0 ? 'true' : 'false');
            
            return {files: files.map(f => f.filename)};
      
      - name: Provide test suggestions
        if: steps.pr_files.outputs.has_swift_files == 'true' && steps.pr_files.outputs.has_test_files == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## Test Coverage Reminder\n\n' +
                   'This PR modifies Swift code but doesn\'t appear to include test updates.\n' +
                   'Consider adding tests to cover the new functionality or modifications.\n\n' +
                   'Good test coverage helps ensure:\n' +
                   '- Your code works as expected\n' +
                   '- Future changes don\'t break your implementation\n' +
                   '- Others understand how to use your code\n\n' +
                   'If you believe tests aren\'t needed for this change, please comment explaining why.'
            });
      
      - name: Provide documentation suggestions
        if: steps.pr_files.outputs.has_swift_files == 'true' && steps.pr_files.outputs.has_doc_files == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## Documentation Reminder\n\n' +
                   'This PR modifies Swift code but doesn\'t appear to include documentation updates.\n' +
                   'Consider updating documentation if your changes:\n' +
                   '- Modify public interfaces\n' +
                   '- Change behavior that users rely on\n' +
                   '- Add new features\n' +
                   '- Fix notable bugs\n\n' +
                   'Good documentation helps other developers understand how to use your code effectively.'
            });
  
  # Comment on pull requests with build status
  pr-comment:
    needs: [pr-analysis]
    runs-on: ubuntu-latest
    steps:
      - name: Wait for main build to complete
        id: wait_for_build
        run: |
          # Simple implementation - in reality, there might be a more sophisticated way to check build status
          # This is a placeholder and would need to be adapted to your actual needs
          echo "Waiting for main build to complete before commenting status..."
          sleep 10
      
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if there are recent workflow runs that contain build information
            const { data: workflows } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'main.yml',
              branch: context.payload.pull_request.head.ref,
              event: 'pull_request',
              per_page: 1
            });
            
            let buildStatus = {
              gui: "⏳ Pending",
              cli: "⏳ Pending",
              duration: "N/A"
            };
            
            if (workflows.workflow_runs && workflows.workflow_runs.length > 0) {
              const run = workflows.workflow_runs[0];
              
              if (run.status === 'completed') {
                if (run.conclusion === 'success') {
                  buildStatus = {
                    gui: "✅ Success",
                    cli: "✅ Success",
                    duration: "Completed successfully"
                  };
                } else {
                  buildStatus = {
                    gui: "❌ Failed",
                    cli: "❌ Failed",
                    duration: "Build failed"
                  };
                }
              } else if (run.status === 'in_progress') {
                buildStatus = {
                  gui: "🔄 In Progress",
                  cli: "🔄 In Progress",
                  duration: "Still running"
                };
              }
            }
            
            const body = `## Build Status
            
            | Component | Status |
            | --- | --- |
            | GUI | ${buildStatus.gui} |
            | CLI | ${buildStatus.cli} |
            
            ${buildStatus.duration}
            
            [View detailed logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/workflows/main.yml)
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            }); 