name: Cleanup Artifacts

on:
  schedule:
    - cron: '0 0 * * 0'  # Run at midnight every Sunday
  workflow_dispatch:  # Allow manual triggering

# Set explicit permissions
permissions:
  actions: write  # Needed to delete artifacts

# Prevent concurrent cleanup runs
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false  # Don't cancel cleanup in progress

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Artifacts
        id: cleanup
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            console.log('Starting cleanup of old artifacts...');
            
            // Configuration
            const now = new Date();
            const retentionDays = {
              // Keep successful build artifacts for 3 days
              "build-artifacts": 3,
              // Keep reports for 7 days
              "reports": 7,
              // Keep security and performance data for longer (14 days)
              "security": 14,
              "performance": 14,
              // Default retention: 7 days
              "default": 7
            };
            
            // Get all artifacts
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo,
              per_page: 100
            });
            
            console.log(`Found ${artifacts.data.artifacts.length} artifacts in the repository`);
            
            let totalFreed = 0;
            let deletedCount = 0;
            
            // Process each artifact
            for (const artifact of artifacts.data.artifacts) {
              // Skip already expired artifacts
              if (artifact.expired) {
                continue;
              }
              
              const createdAt = new Date(artifact.created_at);
              const ageDays = (now - createdAt) / (1000 * 60 * 60 * 24);
              
              // Determine retention period based on name pattern
              let retentionPeriod = retentionDays.default;
              
              if (artifact.name.includes('build-artifacts')) {
                retentionPeriod = retentionDays["build-artifacts"];
              } else if (artifact.name.includes('reports')) {
                retentionPeriod = retentionDays["reports"];
              } else if (artifact.name.includes('security')) {
                retentionPeriod = retentionDays["security"];
              } else if (artifact.name.includes('performance') || artifact.name.includes('benchmark')) {
                retentionPeriod = retentionDays["performance"];
              }
              
              // Delete if older than retention period
              if (ageDays > retentionPeriod) {
                console.log(`Deleting ${artifact.name} (${artifact.size_in_bytes} bytes, ${ageDays.toFixed(1)} days old)...`);
                try {
                  await github.rest.actions.deleteArtifact({
                    owner,
                    repo,
                    artifact_id: artifact.id
                  });
                  
                  totalFreed += artifact.size_in_bytes;
                  deletedCount++;
                  console.log(`Successfully deleted ${artifact.name}`);
                } catch (error) {
                  console.log(`Failed to delete ${artifact.name}: ${error.message}`);
                }
              } else {
                console.log(`Keeping ${artifact.name} (${(artifact.size_in_bytes / 1024 / 1024).toFixed(2)} MB, ${ageDays.toFixed(1)} days old)`);
              }
            }
            
            // Convert bytes to human-readable format
            const formatSize = (bytes) => {
              const units = ['B', 'KB', 'MB', 'GB'];
              let size = bytes;
              let unitIndex = 0;
              
              while (size >= 1024 && unitIndex < units.length - 1) {
                size /= 1024;
                unitIndex++;
              }
              
              return `${size.toFixed(2)} ${units[unitIndex]}`;
            };
            
            // Create summary
            const freedSpace = formatSize(totalFreed);
            console.log(`Cleanup complete. Deleted ${deletedCount} artifacts, freed ${freedSpace}.`);
            
            return {
              deletedCount,
              freedSpace
            };

      - name: Create summary
        run: |
          echo "## Artifact Cleanup Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Artifacts deleted: ${{ fromJSON(steps.cleanup.outputs.result).deletedCount }}" >> $GITHUB_STEP_SUMMARY
          echo "- Space freed: ${{ fromJSON(steps.cleanup.outputs.result).freedSpace }}" >> $GITHUB_STEP_SUMMARY 