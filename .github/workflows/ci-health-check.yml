name: CI Health Check

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight UTC
  workflow_dispatch:  # Allow manual triggering
  pull_request:
    paths:
      - '.github/workflows/**'  # Run when workflow files change

# Set explicit permissions
permissions:
  contents: read
  actions: read  # Needed to read workflow runs
  pull-requests: write  # If we want to comment on PRs with results

jobs:
  health-check:
    name: Check CI Health
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check for outdated GitHub Actions
        id: check-actions
        run: |
          echo "## GitHub Actions Version Check" > action-versions.md
          echo "" >> action-versions.md
          echo "| Workflow | Action | Current Version | Latest Version | Status |" >> action-versions.md
          echo "|----------|--------|----------------|---------------|--------|" >> action-versions.md
          
          # Known latest versions of common actions
          declare -A LATEST_VERSIONS
          LATEST_VERSIONS["actions/checkout"]="v4"
          LATEST_VERSIONS["actions/setup-node"]="v4"
          LATEST_VERSIONS["actions/cache"]="v4"
          LATEST_VERSIONS["actions/upload-artifact"]="v4"
          LATEST_VERSIONS["actions/download-artifact"]="v4"
          LATEST_VERSIONS["actions/github-script"]="v7"
          LATEST_VERSIONS["actions/setup-python"]="v5"
          LATEST_VERSIONS["actions/setup-java"]="v4"
          LATEST_VERSIONS["actions/stale"]="v9"
          
          # Find all workflow files
          find .github/workflows -name "*.yml" -type f | while read -r workflow; do
            workflow_name=$(basename "$workflow")
            
            # Extract action versions using grep and sed
            grep -E "uses: [a-zA-Z0-9_\-]+/[a-zA-Z0-9_\-]+@" "$workflow" | while read -r line; do
              # Extract action name and version
              if [[ $line =~ uses:[[:space:]]([a-zA-Z0-9_\-]+/[a-zA-Z0-9_\-]+)@([a-zA-Z0-9\._\-]+) ]]; then
                action="${BASH_REMATCH[1]}"
                version="${BASH_REMATCH[2]}"
                
                # Check if we know the latest version
                if [[ -n "${LATEST_VERSIONS[$action]}" ]]; then
                  latest="${LATEST_VERSIONS[$action]}"
                  
                  # Compare versions
                  if [[ "$version" == "$latest" ]]; then
                    status="✅ Current"
                  else
                    status="⚠️ Outdated"
                  fi
                else
                  latest="Unknown"
                  status="❓ Unknown"
                fi
                
                # Add to report
                echo "| $workflow_name | $action | $version | $latest | $status |" >> action-versions.md
              fi
            done
          done
          
          # Check for actions that will be deprecated
          echo "" >> action-versions.md
          echo "## Actions with Known Deprecation Plans" >> action-versions.md
          echo "" >> action-versions.md
          echo "| Workflow | Action | Warning |" >> action-versions.md
          echo "|----------|--------|---------|" >> action-versions.md
          
          # List of actions with known deprecation plans
          grep -E "uses: actions/upload-pages-artifact@" --include="*.yml" -r .github/workflows/ | while read -r line; do
            workflow=$(echo "$line" | cut -d: -f1)
            workflow_name=$(basename "$workflow")
            echo "| $workflow_name | actions/upload-pages-artifact | GitHub recommends migrating to new Pages workflow |" >> action-versions.md
          done
          
          # Output summary to step
          cat action-versions.md >> $GITHUB_STEP_SUMMARY
      
      - name: Check for deprecated patterns
        id: check-patterns
        run: |
          echo "## Deprecated Patterns Check" > deprecated-patterns.md
          echo "" >> deprecated-patterns.md
          echo "| Workflow | Line | Pattern | Recommendation |" >> deprecated-patterns.md
          echo "|----------|------|---------|----------------|" >> deprecated-patterns.md
          
          # Check for set-output pattern (deprecated)
          grep -n "::set-output" --include="*.yml" -r .github/workflows/ | while read -r line; do
            file=$(echo "$line" | cut -d: -f1)
            line_num=$(echo "$line" | cut -d: -f2)
            workflow_name=$(basename "$file")
            echo "| $workflow_name | $line_num | ::set-output | Use GITHUB_OUTPUT environment file instead |" >> deprecated-patterns.md
          done
          
          # Check for deprecated commands
          grep -n "::save-state" --include="*.yml" -r .github/workflows/ | while read -r line; do
            file=$(echo "$line" | cut -d: -f1)
            line_num=$(echo "$line" | cut -d: -f2)
            workflow_name=$(basename "$file")
            echo "| $workflow_name | $line_num | ::save-state | Use GITHUB_STATE environment file instead |" >> deprecated-patterns.md
          done
          
          # Check for add-path command
          grep -n "::add-path" --include="*.yml" -r .github/workflows/ | while read -r line; do
            file=$(echo "$line" | cut -d: -f1)
            line_num=$(echo "$line" | cut -d: -f2)
            workflow_name=$(basename "$file")
            echo "| $workflow_name | $line_num | ::add-path | Use GITHUB_PATH environment file instead |" >> deprecated-patterns.md
          done
          
          # Check for missing timeout
          find .github/workflows -name "*.yml" -type f | while read -r workflow; do
            workflow_name=$(basename "$workflow")
            # Check if job has timeout-minutes
            if grep -q "jobs:" "$workflow" && ! grep -q "timeout-minutes:" "$workflow"; then
              echo "| $workflow_name | N/A | Missing timeout | Add timeout-minutes to jobs to prevent stuck runs |" >> deprecated-patterns.md
            fi
          done
          
          # Output summary to step
          cat deprecated-patterns.md >> $GITHUB_STEP_SUMMARY
      
      - name: Check for workflow performance
        id: check-performance
        run: |
          echo "## Workflow Performance Analysis" > performance-analysis.md
          echo "" >> performance-analysis.md
          
          # Get recent workflow runs via GitHub API
          echo "Analyzing recent workflow runs for performance issues..."
          
          # Fetch recent workflow runs (limited to avoid rate limits)
          WORKFLOWS=$(gh api repos/$GITHUB_REPOSITORY/actions/workflows --paginate | jq -r '.workflows[] | select(.state == "active") | .name + "," + .id')
          
          echo "| Workflow | Avg Duration | Success Rate | Trend |" >> performance-analysis.md
          echo "|----------|--------------|-------------|-------|" >> performance-analysis.md
          
          # Process each workflow
          echo "$WORKFLOWS" | while IFS=, read -r name id; do
            # Skip empty entries
            [ -z "$name" ] && continue
            
            echo "Analyzing workflow: $name"
            
            # Get recent runs for this workflow (last 10)
            RUNS=$(gh api repos/$GITHUB_REPOSITORY/actions/workflows/$id/runs --paginate -q '.workflow_runs[0:10]')
            
            # Calculate success rate and average duration
            TOTAL_RUNS=$(echo "$RUNS" | jq 'length')
            [ "$TOTAL_RUNS" -eq 0 ] && continue
            
            SUCCESS_RUNS=$(echo "$RUNS" | jq '[.[] | select(.conclusion == "success")] | length')
            SUCCESS_RATE=$((SUCCESS_RUNS * 100 / TOTAL_RUNS))
            
            # Extract durations and calculate average
            DURATIONS=$(echo "$RUNS" | jq -r '.[] | select(.conclusion != null) | (.updated_at | fromdateiso8601) - (.created_at | fromdateiso8601)')
            
            if [ -z "$DURATIONS" ]; then
              AVG_DURATION="N/A"
              TREND="N/A"
            else
              # Calculate average duration in minutes
              SUM_DURATION=0
              COUNT=0
              FIRST_DURATION=0
              LAST_DURATION=0
              
              for duration in $DURATIONS; do
                if [ $COUNT -eq 0 ]; then
                  FIRST_DURATION=$duration
                fi
                LAST_DURATION=$duration
                SUM_DURATION=$((SUM_DURATION + duration))
                COUNT=$((COUNT + 1))
              done
              
              [ $COUNT -eq 0 ] && continue
              
              AVG_DURATION=$((SUM_DURATION / COUNT / 60))
              
              # Determine trend (first run vs last run)
              if [ $COUNT -gt 1 ]; then
                if [ $FIRST_DURATION -gt $LAST_DURATION ]; then
                  TREND="⬇️ Improving"
                elif [ $FIRST_DURATION -lt $LAST_DURATION ]; then
                  TREND="⬆️ Slower"
                else
                  TREND="➡️ Stable"
                fi
              else
                TREND="N/A"
              fi
            fi
            
            # Add to report with success rate color coding
            if [ $SUCCESS_RATE -ge 90 ]; then
              echo "| $name | $AVG_DURATION min | ✅ $SUCCESS_RATE% | $TREND |" >> performance-analysis.md
            elif [ $SUCCESS_RATE -ge 75 ]; then
              echo "| $name | $AVG_DURATION min | ⚠️ $SUCCESS_RATE% | $TREND |" >> performance-analysis.md
            else
              echo "| $name | $AVG_DURATION min | ❌ $SUCCESS_RATE% | $TREND |" >> performance-analysis.md
            fi
          done
          
          # Output summary to step
          cat performance-analysis.md >> $GITHUB_STEP_SUMMARY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check workflow dependencies
        id: check-dependencies
        run: |
          echo "## Workflow Dependencies Analysis" > dependencies-analysis.md
          echo "" >> dependencies-analysis.md
          echo "This section identifies workflows that depend on each other and potential chain failures." >> dependencies-analysis.md
          echo "" >> dependencies-analysis.md
          
          # Find workflow dependencies (workflow_run triggers)
          echo "### Workflow Run Dependencies" >> dependencies-analysis.md
          echo "" >> dependencies-analysis.md
          echo "| Triggered Workflow | Depends On | Trigger Type |" >> dependencies-analysis.md
          echo "|-------------------|------------|--------------|" >> dependencies-analysis.md
          
          # Find all workflow_run triggers
          grep -A 5 "workflow_run:" --include="*.yml" -r .github/workflows/ | grep -B 5 "workflows:" | while read -r line; do
            if [[ "$line" == *".github/workflows/"* ]]; then
              FILE=$(echo "$line" | cut -d: -f1)
              WORKFLOW_NAME=$(basename "$FILE")
              
              # Extract the workflows this depends on
              DEPENDS_ON=$(grep -A 3 "workflows:" "$FILE" | grep -v "workflows:" | grep -v -- "--" | tr -d '[:space:]' | tr -d '[' | tr -d ']' | tr -d '"' | tr -d "'")
              
              # Get the trigger type
              TRIGGER_TYPE=$(grep -A 5 "types:" "$FILE" | grep -v "types:" | grep -v -- "--" | tr -d '[:space:]' | tr -d '[' | tr -d ']' | tr -d '"' | tr -d "'")
              
              if [ -n "$DEPENDS_ON" ]; then
                echo "| $WORKFLOW_NAME | $DEPENDS_ON | $TRIGGER_TYPE |" >> dependencies-analysis.md
              fi
            fi
          done
          
          # Find job dependencies (needs)
          echo "" >> dependencies-analysis.md
          echo "### Complex Job Dependencies" >> dependencies-analysis.md
          echo "" >> dependencies-analysis.md
          echo "Workflows with complex job dependencies:" >> dependencies-analysis.md
          echo "" >> dependencies-analysis.md
          
          find .github/workflows -name "*.yml" -type f | while read -r workflow; do
            WORKFLOW_NAME=$(basename "$workflow")
            # Count jobs and job dependencies
            JOB_COUNT=$(grep -c "^  [a-zA-Z0-9_-]*:" "$workflow" || echo "0")
            NEEDS_COUNT=$(grep -c "needs:" "$workflow" || echo "0")
            
            # Only report workflows with multiple job dependencies
            if [ "$NEEDS_COUNT" -gt 1 ]; then
              echo "- **$WORKFLOW_NAME**: $JOB_COUNT jobs with $NEEDS_COUNT dependencies" >> dependencies-analysis.md
            fi
          done
          
          # Output summary to step
          cat dependencies-analysis.md >> $GITHUB_STEP_SUMMARY
      
      - name: Generate recommendations
        run: |
          echo "## CI Improvement Recommendations" > recommendations.md
          echo "" >> recommendations.md
          
          # Check if any issues were found
          if grep -q "⚠️ Outdated" action-versions.md || grep -q "[a-zA-Z]" deprecated-patterns.md; then
            echo "### 🛠️ Action Items" >> recommendations.md
            echo "" >> recommendations.md
            
            # Recommendations for outdated actions
            if grep -q "⚠️ Outdated" action-versions.md; then
              echo "1. **Update outdated actions** to their latest versions for security and performance improvements" >> recommendations.md
              grep "⚠️ Outdated" action-versions.md | sed 's/|/\n  -/g' | grep "⚠️" >> recommendations.md
              echo "" >> recommendations.md
            fi
            
            # Recommendations for deprecated patterns
            if grep -q "[a-zA-Z]" deprecated-patterns.md && ! grep -q "No deprecated" deprecated-patterns.md; then
              echo "2. **Fix deprecated workflow commands** to ensure future compatibility" >> recommendations.md
              echo "   - Replace ::set-output with echo \"name=value\" >> \$GITHUB_OUTPUT" >> recommendations.md
              echo "   - Replace ::save-state with echo \"name=value\" >> \$GITHUB_STATE" >> recommendations.md
              echo "   - Replace ::add-path with echo \"value\" >> \$GITHUB_PATH" >> recommendations.md
              echo "" >> recommendations.md
            fi
            
            # Check for performance issues
            if [ -f "performance-analysis.md" ] && grep -q "❌" performance-analysis.md; then
              echo "3. **Address failing workflows** with low success rates" >> recommendations.md
              grep "❌" performance-analysis.md | sed 's/|/\n  -/g' | grep "❌" >> recommendations.md
              echo "" >> recommendations.md
            fi
          fi
          
          # General recommendations
          echo "### 🌟 Best Practices" >> recommendations.md
          echo "" >> recommendations.md
          echo "1. **Set timeouts** on all jobs to prevent stuck workflows" >> recommendations.md
          echo "2. **Use caching** to speed up workflows (particularly Swift dependencies)" >> recommendations.md
          echo "3. **Implement matrix builds** for testing on multiple environments" >> recommendations.md
          echo "4. **Add workflow concurrency limits** to prevent queue buildup" >> recommendations.md
          echo "5. **Apply specific permissions** to each workflow for better security" >> recommendations.md
          echo "6. **Run this health check regularly** to maintain CI quality" >> recommendations.md
          
          # Output summary to step
          cat recommendations.md >> $GITHUB_STEP_SUMMARY
      
      - name: Generate health dashboard
        run: |
          # Create the dashboard HTML
          mkdir -p ci-health-dashboard
          
          cat > ci-health-dashboard/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>CI Health Dashboard</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
              body { 
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif; 
                max-width: 1200px; 
                margin: 0 auto; 
                padding: 20px; 
                line-height: 1.5;
              }
              .card { 
                border: 1px solid #e1e4e8; 
                border-radius: 6px; 
                padding: 16px; 
                margin-bottom: 16px; 
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
              }
              .success { color: #22863a; }
              .warning { color: #b08800; }
              .danger { color: #cb2431; }
              .header { 
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-bottom: 1px solid #e1e4e8;
                padding-bottom: 10px;
                margin-bottom: 20px;
              }
              table { 
                width: 100%; 
                border-collapse: collapse; 
                margin-bottom: 20px;
              }
              th, td { 
                text-align: left; 
                padding: 8px; 
                border-bottom: 1px solid #e1e4e8; 
              }
              th { background-color: #f6f8fa; }
              .summary-box {
                display: inline-block;
                padding: 10px;
                margin: 10px;
                border-radius: 5px;
                width: 200px;
                text-align: center;
              }
              .summary-count {
                font-size: 24px;
                font-weight: bold;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>CI Health Dashboard</h1>
              <p>Generated on $(date)</p>
            </div>
            
            <div class="card">
              <h2>Summary</h2>
              <div style="display: flex; flex-wrap: wrap; justify-content: space-between;">
                <div class="summary-box" style="background-color: #f6f8fa;">
                  <div class="summary-count">$(find .github/workflows -name "*.yml" | wc -l)</div>
                  <div>Total Workflows</div>
                </div>
                <div class="summary-box" style="background-color: #f6ffed;">
                  <div class="summary-count">$(grep -c "✅ Current" action-versions.md)</div>
                  <div>Up-to-date Actions</div>
                </div>
                <div class="summary-box" style="background-color: #fff7e6;">
                  <div class="summary-count">$(grep -c "⚠️ Outdated" action-versions.md)</div>
                  <div>Outdated Actions</div>
                </div>
                <div class="summary-box" style="background-color: #fff1f0;">
                  <div class="summary-count">$(grep -c "[a-zA-Z]" deprecated-patterns.md)</div>
                  <div>Deprecated Patterns</div>
                </div>
              </div>
            </div>
            
            <div class="card">
              <h2>Action Versions Status</h2>
              $(grep -A 500 "| Workflow | Action |" action-versions.md | grep -v "Actions with Known" | grep -B 500 "##" || cat action-versions.md)
            </div>
            
            <div class="card">
              <h2>Deprecated Patterns</h2>
              $(cat deprecated-patterns.md)
            </div>
            
            <div class="card">
              <h2>Workflow Performance</h2>
              $(cat performance-analysis.md)
            </div>
            
            <div class="card">
              <h2>Workflow Dependencies</h2>
              $(cat dependencies-analysis.md)
            </div>
            
            <div class="card">
              <h2>Recommendations</h2>
              $(cat recommendations.md)
            </div>
            
            <footer style="margin-top: 30px; padding-top: 10px; border-top: 1px solid #e1e4e8; color: #6a737d; text-align: center;">
              <p>CI Health Dashboard - Generated by GitHub Actions - <a href="https://github.com/${{ github.repository }}/actions/workflows/ci-health-check.yml">View Workflow</a></p>
            </footer>
          </body>
          </html>
          EOF
      
      - name: Upload health check report
        uses: actions/upload-artifact@v4
        with:
          name: ci-health-report
          path: |
            action-versions.md
            deprecated-patterns.md
            performance-analysis.md
            dependencies-analysis.md
            recommendations.md
            ci-health-dashboard/
          retention-days: 90
          
      - name: Comment on PR if related to workflow changes
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read the recommendations file
            const recommendations = fs.readFileSync('recommendations.md', 'utf8');
            
            // Create a concise summary for the PR comment
            const comment = `## CI Health Check Results

            I've analyzed the workflow changes in this PR and found the following:
            
            ${recommendations}
            
            See the [workflow run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}) for complete details.`;
            
            // Post comment on PR
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 