name: CI Health Check

on:
  schedule:
    - cron: '0 0 * * 1'  # Run weekly on Mondays
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-action-versions:
    name: Check Action Versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Scan for action versions
        id: scan-actions
        run: |
          echo "## GitHub Action Version Report" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This report shows all GitHub Actions used in workflows and their versions." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Workflow | Action | Current Version |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|----------------|" >> $GITHUB_STEP_SUMMARY
          
          # Find all workflow files and extract action versions
          find .github/workflows -name "*.yml" -type f | while read -r file; do
            workflow_name=$(basename "$file")
            
            # Extract lines with uses: statements
            grep -E "uses: [^@]+" "$file" | while read -r line; do
              # Clean up the line to extract action and version
              cleaned_line=$(echo "$line" | sed 's/^[[:space:]]*//g' | sed 's/uses: //g')
              
              # Skip if no @ symbol (local actions)
              if [[ "$cleaned_line" != *"@"* ]]; then
                if [[ "$cleaned_line" == ./.* ]]; then
                  # This is a local action
                  echo "| $workflow_name | $cleaned_line | local |" >> $GITHUB_STEP_SUMMARY
                fi
                continue
              fi
              
              # Extract action and version
              action=$(echo "$cleaned_line" | cut -d '@' -f 1)
              version=$(echo "$cleaned_line" | cut -d '@' -f 2 | cut -d ' ' -f 1)
              
              echo "| $workflow_name | $action | $version |" >> $GITHUB_STEP_SUMMARY
            done
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note**: For each action, verify if newer versions are available." >> $GITHUB_STEP_SUMMARY

  check-deprecated-patterns:
    name: Check for Deprecated Patterns
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check for deprecated patterns
        run: |
          echo "## Deprecated Pattern Check" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Checking for patterns that may indicate deprecated features:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for set-output (deprecated)
          echo "### Deprecated `set-output` command" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          SET_OUTPUT_COUNT=$(grep -r "::set-output" --include="*.yml" .github || echo "")
          if [ -n "$SET_OUTPUT_COUNT" ]; then
            echo "⚠️ Found deprecated `::set-output` usage:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -r "::set-output" --include="*.yml" .github >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "Replace with \`echo \"name=value\" >> \$GITHUB_OUTPUT\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No deprecated `::set-output` usage found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for save-state (deprecated)
          echo "### Deprecated `save-state` command" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          SAVE_STATE_COUNT=$(grep -r "::save-state" --include="*.yml" .github || echo "")
          if [ -n "$SAVE_STATE_COUNT" ]; then
            echo "⚠️ Found deprecated `::save-state` usage:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -r "::save-state" --include="*.yml" .github >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "Replace with \`echo \"name=value\" >> \$GITHUB_STATE\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No deprecated `::save-state` usage found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for add-path (deprecated)
          echo "### Deprecated `add-path` command" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          ADD_PATH_COUNT=$(grep -r "::add-path" --include="*.yml" .github || echo "")
          if [ -n "$ADD_PATH_COUNT" ]; then
            echo "⚠️ Found deprecated `::add-path` usage:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -r "::add-path" --include="*.yml" .github >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "Replace with \`echo \"\$PATH_TO_ADD\" >> \$GITHUB_PATH\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No deprecated `::add-path` usage found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for upload-artifact and download-artifact v2
          echo "### Deprecated artifact action versions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          ARTIFACT_V2_COUNT=$(grep -r "uses: actions/\(upload\|download\)-artifact@v[12]" --include="*.yml" .github || echo "")
          if [ -n "$ARTIFACT_V2_COUNT" ]; then
            echo "⚠️ Found deprecated artifact action versions:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -r "uses: actions/\(upload\|download\)-artifact@v[12]" --include="*.yml" .github >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "Update to v4 for best compatibility" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No deprecated artifact action versions found" >> $GITHUB_STEP_SUMMARY
          fi

  check-workflow-health:
    name: Check Workflow Health
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Validate workflow files
        run: |
          echo "## Workflow File Validation" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Find all workflow files
          WORKFLOW_FILES=$(find .github/workflows -name "*.yml" -type f)
          
          echo "Checking workflow files for common issues:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check each workflow file
          for file in $WORKFLOW_FILES; do
            echo "### $(basename $file)" >> $GITHUB_STEP_SUMMARY
            
            # Check for timeouts
            if ! grep -q "timeout-minutes:" "$file"; then
              echo "⚠️ No timeout specified - consider adding `timeout-minutes` to jobs" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ Has timeout configuration" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Check for continue-on-error where appropriate
            if grep -q "run:" "$file" && ! grep -q "continue-on-error:" "$file"; then
              echo "ℹ️ Consider adding `continue-on-error` for non-critical steps" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Check for workflow_dispatch trigger
            if ! grep -q "workflow_dispatch:" "$file"; then
              echo "ℹ️ No manual trigger - consider adding `workflow_dispatch`" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ Has manual trigger" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
          done

  summarize:
    name: Summarize Findings
    needs: [check-action-versions, check-deprecated-patterns, check-workflow-health]
    runs-on: ubuntu-latest
    steps:
      - name: Create summary
        run: |
          echo "# CI Health Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "CI health check completed on $(date). Review the individual job results for detailed findings." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Regularly update GitHub Actions to their latest versions" >> $GITHUB_STEP_SUMMARY
          echo "2. Replace deprecated command syntaxes with the newer equivalents" >> $GITHUB_STEP_SUMMARY
          echo "3. Ensure all jobs have appropriate timeouts to prevent hung workflows" >> $GITHUB_STEP_SUMMARY
          echo "4. Consider adding error handling for non-critical steps" >> $GITHUB_STEP_SUMMARY
          echo "5. Schedule regular CI maintenance to keep workflows healthy" >> $GITHUB_STEP_SUMMARY 