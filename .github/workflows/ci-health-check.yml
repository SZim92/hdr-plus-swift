name: CI Health Check

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight UTC
  workflow_dispatch:  # Allow manual triggering

# Set explicit permissions
permissions:
  contents: read
  actions: read  # Needed to read workflow runs
  pull-requests: write  # If we want to comment on PRs with results

jobs:
  health-check:
    name: Check CI Health
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check for outdated GitHub Actions
        id: check-actions
        run: |
          echo "## GitHub Actions Version Check" > action-versions.md
          echo "" >> action-versions.md
          echo "| Workflow | Action | Current Version | Latest Version | Status |" >> action-versions.md
          echo "|----------|--------|----------------|---------------|--------|" >> action-versions.md
          
          # Known latest versions of common actions
          declare -A LATEST_VERSIONS
          LATEST_VERSIONS["actions/checkout"]="v4"
          LATEST_VERSIONS["actions/setup-node"]="v4"
          LATEST_VERSIONS["actions/cache"]="v4"
          LATEST_VERSIONS["actions/upload-artifact"]="v4"
          LATEST_VERSIONS["actions/download-artifact"]="v4"
          LATEST_VERSIONS["actions/github-script"]="v7"
          
          # Find all workflow files
          find .github/workflows -name "*.yml" -type f | while read -r workflow; do
            workflow_name=$(basename "$workflow")
            
            # Extract action versions using grep and sed
            grep -E "uses: [a-zA-Z0-9_\-]+/[a-zA-Z0-9_\-]+@" "$workflow" | while read -r line; do
              # Extract action name and version
              if [[ $line =~ uses:[[:space:]]([a-zA-Z0-9_\-]+/[a-zA-Z0-9_\-]+)@([a-zA-Z0-9\._\-]+) ]]; then
                action="${BASH_REMATCH[1]}"
                version="${BASH_REMATCH[2]}"
                
                # Check if we know the latest version
                if [[ -n "${LATEST_VERSIONS[$action]}" ]]; then
                  latest="${LATEST_VERSIONS[$action]}"
                  
                  # Compare versions
                  if [[ "$version" == "$latest" ]]; then
                    status="✅ Current"
                  else
                    status="⚠️ Outdated"
                  fi
                else
                  latest="Unknown"
                  status="❓ Unknown"
                fi
                
                # Add to report
                echo "| $workflow_name | $action | $version | $latest | $status |" >> action-versions.md
              fi
            done
          done
          
          # Check for actions that will be deprecated
          echo "" >> action-versions.md
          echo "## Actions with Known Deprecation Plans" >> action-versions.md
          echo "" >> action-versions.md
          echo "| Workflow | Action | Warning |" >> action-versions.md
          echo "|----------|--------|---------|" >> action-versions.md
          
          # List of actions with known deprecation plans
          grep -E "uses: actions/upload-pages-artifact@" --include="*.yml" -r .github/workflows/ | while read -r line; do
            workflow=$(echo "$line" | cut -d: -f1)
            workflow_name=$(basename "$workflow")
            echo "| $workflow_name | actions/upload-pages-artifact | GitHub recommends migrating to new Pages workflow |" >> action-versions.md
          done
          
          # Output summary to step
          cat action-versions.md >> $GITHUB_STEP_SUMMARY
      
      - name: Check for deprecated patterns
        id: check-patterns
        run: |
          echo "## Deprecated Patterns Check" > deprecated-patterns.md
          echo "" >> deprecated-patterns.md
          echo "| Workflow | Line | Pattern | Recommendation |" >> deprecated-patterns.md
          echo "|----------|------|---------|----------------|" >> deprecated-patterns.md
          
          # Check for set-output pattern (deprecated)
          grep -n "::set-output" --include="*.yml" -r .github/workflows/ | while read -r line; do
            file=$(echo "$line" | cut -d: -f1)
            line_num=$(echo "$line" | cut -d: -f2)
            workflow_name=$(basename "$file")
            echo "| $workflow_name | $line_num | ::set-output | Use GITHUB_OUTPUT environment file instead |" >> deprecated-patterns.md
          done
          
          # Check for deprecated commands
          grep -n "::save-state" --include="*.yml" -r .github/workflows/ | while read -r line; do
            file=$(echo "$line" | cut -d: -f1)
            line_num=$(echo "$line" | cut -d: -f2)
            workflow_name=$(basename "$file")
            echo "| $workflow_name | $line_num | ::save-state | Use GITHUB_STATE environment file instead |" >> deprecated-patterns.md
          done
          
          # Check for add-path command
          grep -n "::add-path" --include="*.yml" -r .github/workflows/ | while read -r line; do
            file=$(echo "$line" | cut -d: -f1)
            line_num=$(echo "$line" | cut -d: -f2)
            workflow_name=$(basename "$file")
            echo "| $workflow_name | $line_num | ::add-path | Use GITHUB_PATH environment file instead |" >> deprecated-patterns.md
          done
          
          # Check for missing timeout
          find .github/workflows -name "*.yml" -type f | while read -r workflow; do
            workflow_name=$(basename "$workflow")
            # Check if job has timeout-minutes
            if grep -q "jobs:" "$workflow" && ! grep -q "timeout-minutes:" "$workflow"; then
              echo "| $workflow_name | N/A | Missing timeout | Add timeout-minutes to jobs to prevent stuck runs |" >> deprecated-patterns.md
            fi
          done
          
          # Output summary to step
          cat deprecated-patterns.md >> $GITHUB_STEP_SUMMARY
      
      - name: Generate recommendations
        run: |
          echo "## CI Improvement Recommendations" > recommendations.md
          echo "" >> recommendations.md
          
          # Check if any issues were found
          if grep -q "⚠️ Outdated" action-versions.md || grep -q "[a-zA-Z]" deprecated-patterns.md; then
            echo "### 🛠️ Action Items" >> recommendations.md
            echo "" >> recommendations.md
            
            # Recommendations for outdated actions
            if grep -q "⚠️ Outdated" action-versions.md; then
              echo "1. **Update outdated actions** to their latest versions for security and performance improvements" >> recommendations.md
              grep "⚠️ Outdated" action-versions.md | sed 's/|/\n  -/g' | grep "⚠️" >> recommendations.md
              echo "" >> recommendations.md
            fi
            
            # Recommendations for deprecated patterns
            if grep -q "[a-zA-Z]" deprecated-patterns.md && ! grep -q "No deprecated" deprecated-patterns.md; then
              echo "2. **Fix deprecated workflow commands** to ensure future compatibility" >> recommendations.md
              echo "   - Replace ::set-output with echo \"name=value\" >> \$GITHUB_OUTPUT" >> recommendations.md
              echo "   - Replace ::save-state with echo \"name=value\" >> \$GITHUB_STATE" >> recommendations.md
              echo "   - Replace ::add-path with echo \"value\" >> \$GITHUB_PATH" >> recommendations.md
              echo "" >> recommendations.md
            fi
            
            # General recommendations
            echo "### 🌟 Best Practices" >> recommendations.md
            echo "" >> recommendations.md
            echo "1. **Set timeouts** on all jobs to prevent stuck workflows" >> recommendations.md
            echo "2. **Use caching** to speed up workflows" >> recommendations.md
            echo "3. **Implement matrix builds** for testing on multiple environments" >> recommendations.md
            echo "4. **Add workflow concurrency limits** to prevent queue buildup" >> recommendations.md
            echo "5. **Run this health check regularly** to maintain CI quality" >> recommendations.md
          else
            echo "✅ **No critical issues found in your CI configuration**" >> recommendations.md
            echo "" >> recommendations.md
            echo "Your workflows appear to be following best practices. Continue to run this health check regularly to catch any future issues." >> recommendations.md
          fi
          
          # Output summary to step
          cat recommendations.md >> $GITHUB_STEP_SUMMARY
      
      - name: Upload health check report
        uses: actions/upload-artifact@v4
        with:
          name: ci-health-report
          path: |
            action-versions.md
            deprecated-patterns.md
            recommendations.md
          retention-days: 30 