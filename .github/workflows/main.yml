name: CI

on:
  push:
    branches: [ main ]
    paths:
      - 'burstphoto/**'       # Only run on code changes
      - '**/*.xcodeproj/**'   # Or Xcode project changes
      - 'Package.swift'       # Or package dependency changes
      - '.github/workflows/main.yml' # Or changes to this workflow
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Set explicit permissions - principle of least privilege
permissions:
  contents: read
  checks: write
  pull-requests: write

# Prevent concurrent runs of the same workflow on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Core linting job to run quickly in parallel
  lint:
    name: Lint Swift Code
    runs-on: macos-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Set up Swift environment
        uses: ./.github/actions/optimized-swift-setup
        with:
          cache-name: 'lint'
          install-swiftlint: 'true'
          
      - name: Run SwiftLint
        run: |
          echo "Running linting checks..."
          swiftlint --strict --reporter github-actions-logging burstphoto || true
          mkdir -p test-results
          swiftlint burstphoto --reporter json > test-results/swiftlint-results.json || true
          echo "::group::Lint Summary"
          echo "Linting completed. See detailed results in the artifacts."
          echo "::endgroup::"
          
      - name: Upload lint results
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: test-results/
          retention-days: 3

  # Matrix-based testing across macOS versions
  test:
    name: Test on ${{ matrix.os }}
    needs: lint
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Swift environment
        id: swift-setup
        uses: ./.github/actions/optimized-swift-setup
        with:
          cache-name: 'test-${{ matrix.os }}'
          disable-code-signing: 'true'
          use-retry: 'true'
          
      - name: Report Setup Metrics
        run: |
          echo "::group::Environment Info"
          echo "Swift setup completed in ${{ steps.swift-setup.outputs.setup-time }} seconds"
          echo "Using Swift version: ${{ steps.swift-setup.outputs.swift-version }}"
          echo "Using Xcode version: ${{ steps.swift-setup.outputs.xcode-version }}"
          echo "Cache hit: ${{ steps.swift-setup.outputs.cache-hit }}"
          echo "::endgroup::"
          
      - name: Build and Test
        id: build-test
        continue-on-error: true
        run: |
          echo "::group::Building HDR+ Project"
          START_TIME=$(date +%s)
          
          # Print environment details
          echo "Current directory: $(pwd)"
          echo "Available DNG libraries:"
          ls -la dng_sdk/xmp_lib/
          
          # Ensure correct library paths
          mkdir -p ~/Library/Developer/Xcode/DerivedData/burstphoto-*/Build/Products/Debug
          
          # Build the project with correct library paths and diagnostics
          set -x  # Enable command echo for debugging
          xcodebuild clean build-for-testing \
            -project burstphoto.xcodeproj \
            -scheme gui \
            -destination "platform=macOS" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            OTHER_LDFLAGS="-L$(pwd)/dng_sdk/xmp_lib" \
            LIBRARY_SEARCH_PATHS="$(pwd)/dng_sdk/xmp_lib" \
            VALID_ARCHS="x86_64" \
            ARCHS="x86_64" \
            ONLY_ACTIVE_ARCH=NO \
            GCC_OPTIMIZATION_LEVEL=0 \
            DEBUG_INFORMATION_FORMAT=dwarf \
            SWIFT_OPTIMIZATION_LEVEL="-Onone" \
            | tee build.log || { echo "::warning::Build failed but continuing"; BUILD_FAILED=1; }
          set +x  # Disable command echo
            
          BUILD_END_TIME=$(date +%s)
          BUILD_TIME=$((BUILD_END_TIME - START_TIME))
          echo "Build completed in ${BUILD_TIME} seconds"
          echo "::endgroup::"
          
          # Always create a test results directory, even if empty
          mkdir -p TestResults.xcresult
          
          # Only run tests if build was successful
          if [ -z "$BUILD_FAILED" ]; then
            echo "::group::Running Tests"
            # Run tests with correct library paths
            set -x  # Enable command echo for debugging
            xcodebuild test-without-building \
              -project burstphoto.xcodeproj \
              -scheme gui \
              -destination "platform=macOS" \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGN_IDENTITY="" \
              OTHER_LDFLAGS="-L$(pwd)/dng_sdk/xmp_lib" \
              LIBRARY_SEARCH_PATHS="$(pwd)/dng_sdk/xmp_lib" \
              ARCHS="x86_64" \
              -resultBundlePath TestResults.xcresult \
              | tee test.log || { 
                echo "::warning::Tests failed but continuing"; 
                # Ensure xcresult bundle has a marker file even if tests failed
                touch TestResults.xcresult/tests-ran-but-failed
              }
            set +x  # Disable command echo
              
            TEST_END_TIME=$(date +%s)
            TEST_TIME=$((TEST_END_TIME - BUILD_END_TIME))
            TOTAL_TIME=$((TEST_END_TIME - START_TIME))
            
            echo "Tests completed in ${TEST_TIME} seconds"
          else
            echo "::group::Tests Skipped"
            echo "Tests were not run because the build failed"
            # Create a marker file in the test results directory
            touch TestResults.xcresult/build-failed-tests-skipped
          fi
          echo "::endgroup::"
          
      - name: Visualize Test Results
        id: test-visualizer
        uses: ./.github/actions/test-results-visualizer
        with:
          results-path: 'TestResults.xcresult'
          report-name: 'HDR+ Tests on ${{ matrix.os }}'
          include-coverage: 'true'
        continue-on-error: true
          
      - name: Report Test Metrics
        run: |
          echo "::group::Test Result Metrics"
          echo "Total tests: ${{ steps.test-visualizer.outputs.total-tests }}"
          echo "Success rate: ${{ steps.test-visualizer.outputs.success-rate }}%"
          echo "Report available at: ${{ steps.test-visualizer.outputs.report-path }}"
          echo "::endgroup::"
          
      - name: Check Test Status
        id: test-status
        run: |
          # Initialize variables
          FAILURE_FOUND=0
          
          # Check if tests actually ran and failed
          if [ -f "TestResults.xcresult/tests-ran-but-failed" ]; then
            echo "::error title=Test Failure::Tests were executed but failed. See test reports for details."
            echo "failure_reason=Tests failed during execution" >> $GITHUB_OUTPUT
            
            # Try to extract failure information for more detailed annotations
            if [ -f "test-reports/test-report.md" ]; then
              # Find failed test sections in the Markdown report
              FAILED_TESTS=$(sed -n '/^### .*$/,/^$/p' test-reports/test-report.md | grep "^###" | sed 's/^### //')
              
              # Output each failed test as a separate annotation
              for TEST in $FAILED_TESTS; do
                ERROR_MSG=$(sed -n "/^### $TEST$/,/^$/p" test-reports/test-report.md | grep "Error:" | sed 's/- \*\*Error:\*\* //')
                LOCATION=$(sed -n "/^### $TEST$/,/^$/p" test-reports/test-report.md | grep "Location:" | sed 's/- \*\*Location:\*\* //')
                
                if [ -n "$LOCATION" ]; then
                  FILE=$(echo $LOCATION | cut -d':' -f1)
                  LINE=$(echo $LOCATION | cut -d':' -f2)
                  echo "::error file=$FILE,line=$LINE,title=Failed Test ($TEST)::$ERROR_MSG"
                else
                  echo "::error title=Failed Test ($TEST)::$ERROR_MSG"
                fi
              done
            fi
            
            FAILURE_FOUND=1
          fi
          
          # Check if build failed
          if [ -f "TestResults.xcresult/build-failed-tests-skipped" ]; then
            echo "::error title=Build Failure::Build failed, so tests were skipped. See build logs for details."
            echo "failure_reason=Build failed, tests were skipped" >> $GITHUB_OUTPUT
            
            # Try to extract build errors from logs
            if [ -f "build.log" ]; then
              # Extract error lines from the build log
              grep -A 3 "error:" build.log | head -n 10 | while read -r LINE; do
                echo "::error title=Build Error::$LINE"
              done
            fi
            
            FAILURE_FOUND=1
          fi
          
          # Check for synthetic data generation
          if [ "${{ steps.test-visualizer.outputs.used-synthetic-data }}" == "true" ]; then
            echo "::warning title=Synthetic Data::This run used synthetic test data. Real tests may have failed or not run at all."
            echo "used_synthetic_data=true" >> $GITHUB_OUTPUT
          fi
          
          # Set output for failure found
          echo "failure_found=$FAILURE_FOUND" >> $GITHUB_OUTPUT
          
          # Fail the workflow if failures were found
          if [ $FAILURE_FOUND -eq 1 ]; then
            exit 1
          fi
          
      - name: Comment on PR for test failures
        if: github.event_name == 'pull_request' && steps.test-status.outputs.failure_found == '1'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.issue.number;
            const failureReason = '${{ steps.test-status.outputs.failure_reason }}';
            
            let body = `## ❌ Test Failure on ${{ matrix.os }}
            
            Tests failed on this PR. The failure reason was:
            
            **${failureReason}**
            
            Please review the [test report](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.
            `;
            
            // If used synthetic data, add warning
            if ('${{ steps.test-status.outputs.used_synthetic_data }}' === 'true') {
              body += '\n⚠️ **Warning**: Synthetic test data was used in this run. The actual test results may be incomplete.';
            }
            
            // Add link to test artifacts
            body += `
            
            [View Test Artifacts](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}/artifacts)
            `;
            
            github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
      
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: |
            TestResults.xcresult
            test-reports/
          retention-days: 5

  # Main build for release
  build:
    name: Build Release
    needs: [lint, test]
    runs-on: macos-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Swift environment
        uses: ./.github/actions/optimized-swift-setup
        with:
          cache-name: 'release-build'
          disable-code-signing: 'false'
          
      - name: Configure Keychain
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Setting up keychain for signed builds on main branch"
          # This is a placeholder for actual keychain setup
          # In a real scenario, you would use secrets to set up code signing
          
      - name: Build for Release
        run: |
          echo "Building for release..."
          # Print environment details
          echo "Current directory: $(pwd)"
          echo "Available DNG libraries:"
          ls -la dng_sdk/xmp_lib/
          
          set -x  # Enable command echo for debugging
          xcodebuild build \
            -project burstphoto.xcodeproj \
            -scheme gui \
            -configuration Release \
            -destination "platform=macOS" \
            ONLY_ACTIVE_ARCH=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            OTHER_LDFLAGS="-L$(pwd)/dng_sdk/xmp_lib" \
            LIBRARY_SEARCH_PATHS="$(pwd)/dng_sdk/xmp_lib" \
            VALID_ARCHS="x86_64" \
            ARCHS="x86_64" \
            | tee release_build.log || { echo "::error::Release build failed"; cat release_build.log; exit 1; }
          set +x  # Disable command echo
            
      - name: Package Application
        run: |
          echo "Packaging application..."
          mkdir -p artifacts
          # Example command to package the app
          # ditto -c -k --keepParent "build/Release/HDRPlus.app" "artifacts/HDRPlus.zip"
          
          # For now, just create a placeholder
          touch artifacts/build-completed.txt
          echo "Build completed at $(date)" > artifacts/build-completed.txt
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: artifacts/
          retention-days: 7
          
  # Summarize results
  summarize:
    name: Summarize Results
    if: always()
    needs: [lint, test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate Summary
        id: summary
        run: |
          echo "## CI Results Summary" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Initialize variables
          FAILED_TESTS=0
          
          echo "### Linting Status" >> $GITHUB_STEP_SUMMARY
          if [ -d "lint-results" ]; then
            echo "✅ Linting completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Linting failed or did not complete" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Testing Status" >> $GITHUB_STEP_SUMMARY
          for os in "macos-13" "macos-14"; do
            if [ -d "test-results-$os" ]; then
              # Check for test failure markers
              if [ -f "test-results-$os/TestResults.xcresult/tests-ran-but-failed" ]; then
                echo "❌ Tests on $os failed - Check test report for details" >> $GITHUB_STEP_SUMMARY
                FAILED_TESTS=1
              elif [ -f "test-results-$os/TestResults.xcresult/build-failed-tests-skipped" ]; then
                echo "❌ Build on $os failed - Tests were skipped" >> $GITHUB_STEP_SUMMARY
                FAILED_TESTS=1
              else
                # Check if test report exists
                if [ -f "test-results-$os/test-reports/test-report.html" ]; then
                  echo "✅ Tests on $os completed" >> $GITHUB_STEP_SUMMARY
                  
                  # Extract success rate if available
                  if grep -q "Success Rate:" "test-results-$os/test-reports/test-report.md" 2>/dev/null; then
                    SUCCESS_RATE=$(grep "Success Rate:" "test-results-$os/test-reports/test-report.md" | sed 's/.*: //')
                    echo "   - Success Rate: $SUCCESS_RATE" >> $GITHUB_STEP_SUMMARY
                    
                    # Check if success rate is below threshold (95%)
                    RATE_VALUE=$(echo "$SUCCESS_RATE" | sed 's/%//')
                    if (( $(echo "$RATE_VALUE < 95" | bc -l) )); then
                      echo "   - ⚠️ Success rate below 95% threshold" >> $GITHUB_STEP_SUMMARY
                      FAILED_TESTS=1
                    fi
                  fi
                  
                  # Check if synthetic data was used
                  if grep -q "synthetic test data" "test-results-$os/test-reports/test-report.md" 2>/dev/null; then
                    echo "   - ⚠️ Used synthetic data - real tests may have failed" >> $GITHUB_STEP_SUMMARY
                    # If synthetic data was used due to failure, count as failed test
                    if grep -q "Tests were executed but failed" "test-results-$os/test-reports/test-report.md" 2>/dev/null; then
                      FAILED_TESTS=1
                    fi
                  fi
                else
                  echo "⚠️ Tests on $os may have issues - Test report not found" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            else
              echo "❌ Tests on $os failed or did not complete" >> $GITHUB_STEP_SUMMARY
              FAILED_TESTS=1
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          if [ -d "build-artifacts" ]; then
            echo "✅ Build completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build failed or did not complete" >> $GITHUB_STEP_SUMMARY
            FAILED_TESTS=1
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Performance Summary" >> $GITHUB_STEP_SUMMARY
          echo "This workflow used a new optimized CI setup with:" >> $GITHUB_STEP_SUMMARY
          echo "- Parallel testing across macOS versions" >> $GITHUB_STEP_SUMMARY
          echo "- Intelligent caching for faster builds" >> $GITHUB_STEP_SUMMARY
          echo "- Separate lint job for faster feedback" >> $GITHUB_STEP_SUMMARY
          
          # Add overall summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Overall Status" >> $GITHUB_STEP_SUMMARY
          if [ $FAILED_TESTS -eq 0 ]; then
            echo "✅ **All tests passed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "pass=true" >> $GITHUB_OUTPUT
          else
            echo "❌ **One or more tests failed or had issues**" >> $GITHUB_STEP_SUMMARY
            echo "pass=false" >> $GITHUB_OUTPUT
            # Mark the workflow as failed if there were actual test failures
            exit 1
          fi 