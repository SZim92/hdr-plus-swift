name: Apple Platform Compatibility

on:
  workflow_dispatch:
    inputs:
      platform_filter:
        description: 'Filter for specific platforms to test (e.g. macos-14, macos-13)'
        required: false
        default: 'all'
  schedule:
    - cron: '0 0 * * 1'  # Run every Monday at midnight UTC
  push:
    branches:
      - main
    paths:
      - '**.swift'
      - '**.metal'
      - 'burstphoto.xcodeproj/**'
      - '.github/workflows/cross-platform.yml'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.swift'
      - '**.metal'
      - 'burstphoto.xcodeproj/**'
      - '.github/workflows/cross-platform.yml'

# Prevent concurrent runs on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Use the centralized configuration from our shared components
  config:
    name: Setup Test Matrix
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.matrix-setup.outputs.platforms }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Load CI configuration
        id: matrix-setup
        run: |
          # Check if jq is installed, install if needed
          if ! command -v jq &>/dev/null; then
            echo "Installing jq..."
            apt-get update && apt-get install -y jq
          fi
          
          # Get the list of platforms from config file
          if [ -f ".github/workflows/shared/ci-config.yml" ]; then
            # Parse YAML with yq or another tool if available
            # For now, using hardcoded values or manual parsing
            
            # Default platforms (if file parsing fails)
            PLATFORM_DEFINITIONS=$(cat <<'EOF'
            [
              {"name": "macOS Sonoma (Apple Silicon)", "runner": "macos-14", "xcode": "15.2", "architecture": "arm64"},
              {"name": "macOS Ventura (Intel)", "runner": "macos-13", "xcode": "15.0", "architecture": "x86_64"}
            ]
            EOF
            )
          else
            # Fallback platforms
            PLATFORM_DEFINITIONS=$(cat <<'EOF'
            [
              {"name": "macOS Sonoma (Apple Silicon)", "runner": "macos-14", "xcode": "15.2", "architecture": "arm64"},
              {"name": "macOS Ventura (Intel)", "runner": "macos-13", "xcode": "15.0", "architecture": "x86_64"}
            ]
            EOF
            )
          fi
          
          # Apply platform filter if specified
          PLATFORM_FILTER="${{ github.event.inputs.platform_filter }}"
          if [ -n "$PLATFORM_FILTER" ] && [ "$PLATFORM_FILTER" != "all" ]; then
            # Filter platforms based on input
            FILTERED_PLATFORMS="["
            IFS=',' read -ra FILTER_LIST <<< "$PLATFORM_FILTER"
            
            for platform in "${FILTER_LIST[@]}"; do
              case "$platform" in
                macos-14|sonoma)
                  # Extract the macOS 14 entry from PLATFORM_DEFINITIONS
                  echo "Including macOS Sonoma..."
                  FILTERED_PLATFORMS+=$(echo "$PLATFORM_DEFINITIONS" | jq '.[] | select(.runner == "macos-14")')
                  FILTERED_PLATFORMS+=","
                  ;;
                macos-13|ventura)
                  # Extract the macOS 13 entry from PLATFORM_DEFINITIONS
                  echo "Including macOS Ventura..."
                  FILTERED_PLATFORMS+=$(echo "$PLATFORM_DEFINITIONS" | jq '.[] | select(.runner == "macos-13")')
                  FILTERED_PLATFORMS+=","
                  ;;
                *)
                  echo "Ignoring unknown platform: $platform"
                  ;;
              esac
            done
            
            # Remove trailing comma and close array
            FILTERED_PLATFORMS="${FILTERED_PLATFORMS%,}]"
            
            # Use filtered platforms if not empty, otherwise use all
            if [ "$FILTERED_PLATFORMS" != "[]" ]; then
              PLATFORMS=$FILTERED_PLATFORMS
            else
              echo "No valid platforms specified, using all platforms"
              PLATFORMS=$PLATFORM_DEFINITIONS
            fi
          else
            # Use all platforms
            PLATFORMS=$PLATFORM_DEFINITIONS
          fi
          
          echo "Generated platform configuration:"
          echo "$PLATFORMS" | jq .
          
          # Output as compact JSON
          echo "platforms=$(echo "$PLATFORMS" | jq -c .)" >> $GITHUB_OUTPUT
        shell: bash
  
  # Use our shared Metal testing workflow instead of custom implementation
  test:
    name: Test on ${{ matrix.platform.name }}
    needs: config
    strategy:
      fail-fast: false  # Continue with other platforms if one fails
      matrix:
        platform: ${{ fromJson(needs.config.outputs.platforms) }}
    
    uses: ./.github/workflows/shared/metal-testing.yml
    with:
      platform: ${{ matrix.platform.runner }}
      xcode-version: ${{ matrix.platform.xcode }}
      architecture: ${{ matrix.platform.architecture }}
      
  # Use our shared test summarizer workflow
  summarize:
    name: Summarize Results
    needs: test
    if: always()  # Run even if tests fail
    
    uses: ./.github/workflows/shared/test-summarizer.yml
  
  # Add PR feedback only for pull requests
  pr-feedback:
    name: PR Feedback
    if: github.event_name == 'pull_request'
    needs: [summarize]
    uses: ./.github/workflows/shared/enhanced-pr-feedback.yml
    with:
      pr-number: ${{ github.event.pull_request.number }}
      artifact-prefix: 'test-results-'
      include-metal-diagnostics: true
      include-visual-comparisons: false
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }} 