name: Enhanced PR Feedback

on:
  workflow_call:
    inputs:
      pr-number:
        required: true
        type: number
        description: 'Pull request number'
      artifact-prefix:
        required: false
        type: string
        default: 'test-results-'
        description: 'Prefix for test result artifacts'
      include-metal-diagnostics:
        required: false
        type: boolean
        default: false 
        description: 'Whether to include Metal diagnostics in PR feedback'
      include-visual-comparisons:
        required: false
        type: boolean
        default: false
        description: 'Whether to include visual test comparisons in PR feedback'
    secrets:
      token:
        required: true
        description: 'GitHub token with PR write permissions'

jobs:
  feedback:
    name: Generate PR Feedback
    runs-on: ubuntu-latest
    steps:
      - name: Download test results
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.token }}
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            // Function to create directory if it doesn't exist
            const mkdir = (dir) => {
              if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
              }
            };
            
            // Create directory for downloaded artifacts
            mkdir('pr-artifacts');
            
            // Get workflow run details
            const workflowRun = context.payload.workflow_run || {
              id: context.runId
            };
            
            console.log(`Getting artifacts for workflow run ${workflowRun.id}`);
            
            // List artifacts for the current workflow run
            const { data: { artifacts } } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: workflowRun.id,
            });
            
            console.log(`Found ${artifacts.length} artifacts`);
            
            // Download the artifacts we need
            const artifactPrefix = '${{ inputs.artifact-prefix }}';
            const includeMetal = '${{ inputs.include-metal-diagnostics }}' === 'true';
            const includeVisual = '${{ inputs.include-visual-comparisons }}' === 'true';
            
            let testResults = [];
            let metalDiagnostics = null;
            let visualResults = null;
            
            for (const artifact of artifacts) {
              console.log(`Processing artifact: ${artifact.name}`);
              
              // Download test results
              if (artifact.name.startsWith(artifactPrefix)) {
                console.log(`Downloading test result artifact: ${artifact.name}`);
                
                const download = await github.rest.actions.downloadArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                  archive_format: 'zip',
                });
                
                // Write the artifact zip to disk
                const artifactDir = `pr-artifacts/${artifact.name}`;
                mkdir(artifactDir);
                
                fs.writeFileSync(`${artifactDir}.zip`, Buffer.from(download.data));
                
                // Extract the zip
                execSync(`unzip -q ${artifactDir}.zip -d ${artifactDir}`);
                
                testResults.push(artifact.name);
              }
              
              // Download Metal diagnostics if needed
              if (includeMetal && artifact.name === 'metal-diagnostics') {
                console.log(`Downloading Metal diagnostics`);
                
                const download = await github.rest.actions.downloadArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                  archive_format: 'zip',
                });
                
                // Write the artifact zip to disk
                const artifactDir = `pr-artifacts/metal-diagnostics`;
                mkdir(artifactDir);
                
                fs.writeFileSync(`${artifactDir}.zip`, Buffer.from(download.data));
                
                // Extract the zip
                execSync(`unzip -q ${artifactDir}.zip -d ${artifactDir}`);
                
                metalDiagnostics = artifactDir;
              }
              
              // Download visual test results if needed
              if (includeVisual && artifact.name === 'visual-test-outputs') {
                console.log(`Downloading visual test results`);
                
                const download = await github.rest.actions.downloadArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                  archive_format: 'zip',
                });
                
                // Write the artifact zip to disk
                const artifactDir = `pr-artifacts/visual-test-outputs`;
                mkdir(artifactDir);
                
                fs.writeFileSync(`${artifactDir}.zip`, Buffer.from(download.data));
                
                // Extract the zip
                execSync(`unzip -q ${artifactDir}.zip -d ${artifactDir}`);
                
                visualResults = artifactDir;
              }
            }
            
            // Return the results
            return {
              testResults,
              metalDiagnostics,
              visualResults
            };
      
      - name: Generate PR feedback
        id: feedback
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.token }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Function to check if file exists
            const fileExists = (file) => {
              try {
                return fs.existsSync(file);
              } catch (err) {
                return false;
              }
            };
            
            // Function to read file with fallback
            const readFileWithFallback = (file, fallback = '') => {
              try {
                if (fileExists(file)) {
                  return fs.readFileSync(file, 'utf8');
                }
              } catch (err) {
                console.error(`Error reading file ${file}:`, err);
              }
              return fallback;
            };
            
            // Start building our PR comment
            let body = `## CI Results Summary\n\n`;
            
            // Process test results
            const testResultDirs = fs.readdirSync('pr-artifacts')
              .filter(d => d.startsWith('${{ inputs.artifact-prefix }}') && !d.endsWith('.zip'));
            
            if (testResultDirs.length > 0) {
              body += `### Test Results\n\n`;
              
              // Get platform names from directory names
              const platforms = testResultDirs.map(dir => {
                // Extract platform name from directory name (e.g., "test-results-macos-14" -> "macOS 14")
                const platform = dir.replace('${{ inputs.artifact-prefix }}', '');
                return {
                  dirName: dir,
                  name: platform.replace(/macos-(\d+)/, 'macOS $1')
                };
              });
              
              // Add summary table
              body += `| Platform | Status | Tests | Passed | Failed |\n`;
              body += `|----------|--------|-------|--------|--------|\n`;
              
              for (const platform of platforms) {
                // Try to read the summary.md file
                const summaryFile = `pr-artifacts/${platform.dirName}/summary.md`;
                
                let status = '✅ Passed';
                let totalTests = 'N/A';
                let passedTests = 'N/A';
                let failedTests = '0';
                
                // Parse the summary file if it exists
                if (fileExists(summaryFile)) {
                  const summary = readFileWithFallback(summaryFile);
                  
                  // Extract test counts
                  const totalMatch = summary.match(/Total tests: (\d+)/);
                  if (totalMatch) totalTests = totalMatch[1];
                  
                  const passedMatch = summary.match(/Passed: (\d+)/);
                  if (passedMatch) passedTests = passedMatch[1];
                  
                  const failedMatch = summary.match(/Failed: (\d+)/);
                  if (failedMatch) {
                    failedTests = failedMatch[1];
                    if (failedTests !== '0') {
                      status = '❌ Failed';
                    }
                  }
                } else {
                  status = '⚠️ No Results';
                }
                
                // Add row to table
                body += `| ${platform.name} | ${status} | ${totalTests} | ${passedTests} | ${failedTests} |\n`;
              }
              
              // Check if we have any failed tests
              const failureDetailsFiles = [];
              for (const platform of platforms) {
                const failureFile = `pr-artifacts/${platform.dirName}/failures.md`;
                if (fileExists(failureFile)) {
                  failureDetailsFiles.push({ platform: platform.name, file: failureFile });
                }
              }
              
              // Add failure details if we have any
              if (failureDetailsFiles.length > 0) {
                body += `\n### Test Failures\n\n`;
                
                for (const { platform, file } of failureDetailsFiles) {
                  const failureContent = readFileWithFallback(file);
                  body += `<details>\n<summary>${platform} Failures</summary>\n\n${failureContent}\n</details>\n\n`;
                }
              }
            } else {
              body += `### Test Results\n\nNo test results found.\n\n`;
            }
            
            // Include Metal diagnostics if available
            const includeMetal = '${{ inputs.include-metal-diagnostics }}' === 'true';
            if (includeMetal) {
              const metalSummaryFile = `pr-artifacts/metal-diagnostics/metal_support_summary.md`;
              
              if (fileExists(metalSummaryFile)) {
                const metalSummary = readFileWithFallback(metalSummaryFile);
                body += `\n### Metal Environment\n\n`;
                body += `<details>\n<summary>Metal Capabilities</summary>\n\n${metalSummary}\n</details>\n\n`;
              }
            }
            
            // Include visual test results if available
            const includeVisual = '${{ inputs.include-visual-comparisons }}' === 'true';
            if (includeVisual) {
              const visualDir = `pr-artifacts/visual-test-outputs`;
              
              if (fileExists(visualDir)) {
                body += `\n### Visual Testing\n\n`;
                
                // Check if we have comparison images
                const comparisonDir = `${visualDir}/comparison`;
                if (fileExists(comparisonDir)) {
                  const diffImages = fs.readdirSync(comparisonDir).filter(f => f.endsWith('-diff.png'));
                  
                  if (diffImages.length > 0) {
                    body += `⚠️ **Visual differences detected**\n\n`;
                    body += `Check the \`visual-test-outputs\` artifact for detailed comparison images.\n\n`;
                  } else {
                    body += `✅ **No visual differences detected**\n\n`;
                  }
                } else {
                  // Just list the test images
                  const testImages = fs.readdirSync(visualDir).filter(f => f.endsWith('.png'));
                  
                  if (testImages.length > 0) {
                    body += `Generated ${testImages.length} test images.\n\n`;
                    body += `See the \`visual-test-outputs\` artifact for details.\n\n`;
                  } else {
                    body += `No visual test images found.\n\n`;
                  }
                }
              } else {
                body += `\n### Visual Testing\n\nNo visual test results found.\n\n`;
              }
            }
            
            // Add workflow execution details
            body += `\n### Workflow Details\n\n`;
            body += `Workflow: [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
            body += `Commit: [${context.sha.substring(0, 7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n`;
            
            // Post the comment to the PR
            const prNumber = ${{ inputs.pr-number }};
            
            console.log(`Posting comment to PR #${prNumber}`);
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: body
            });
            
            console.log('Comment posted successfully');
            
            // Add the comment to workflow summary as well
            return body;
            
      - name: Add PR comment to workflow summary
        run: |
          echo "${{ steps.feedback.outputs.result }}" >> $GITHUB_STEP_SUMMARY 