name: Test Results Dashboard

on:
  workflow_dispatch:  # Allow manual triggering
  schedule:
    - cron: '0 1 * * 0'  # Run every Sunday at 1 AM UTC
  workflow_run:
    workflows: [CI]
    types:
      - completed

# Set explicit permissions
permissions:
  contents: write  # Needed to create/update branches
  pull-requests: write  # Needed to create PRs
  actions: read  # Needed to read workflow runs for dashboard

# Prevent concurrent dashboard generation
concurrency:
  group: "test-dashboard"
  cancel-in-progress: true  # Cancel outdated dashboard generation

jobs:
  generate-test-dashboard:
    name: Generate Test Results Dashboard
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download test results artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: CI
          workflow_conclusion: any
          name: test-results-*
          path: test-results
          
      - name: Process downloaded results
        run: |
          echo "Processing test results from recent CI runs..."
          mkdir -p dashboard
          
          # Create directory structure
          mkdir -p dashboard/data
          mkdir -p dashboard/charts
          mkdir -p dashboard/reports
          
          # Extract test data from downloaded artifacts
          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0
          SKIPPED_TESTS=0
          FLAKY_TESTS=0
          
          # Process test result files
          find test-results -name "*.json" | while read -r file; do
            echo "Processing $file..."
            
            # Extract data points for dashboard
            TESTS_COUNT=$(jq '.tests | length' "$file" 2>/dev/null || echo 0)
            PASS_COUNT=$(jq '.passed | length' "$file" 2>/dev/null || echo 0)
            FAIL_COUNT=$(jq '.failed | length' "$file" 2>/dev/null || echo 0)
            SKIP_COUNT=$(jq '.skipped | length' "$file" 2>/dev/null || echo 0)
            
            # Calculate totals
            TOTAL_TESTS=$((TOTAL_TESTS + TESTS_COUNT))
            PASSED_TESTS=$((PASSED_TESTS + PASS_COUNT))
            FAILED_TESTS=$((FAILED_TESTS + FAIL_COUNT))
            SKIPPED_TESTS=$((SKIPPED_TESTS + SKIP_COUNT))
            
            # Extract and record specific test data
            jq -r '.tests[] | "\(.name),\(.status),\(.duration)"' "$file" 2>/dev/null >> dashboard/data/all_tests.csv || true
          done
          
          # Find potentially flaky tests (pass in some runs, fail in others)
          if [ -f dashboard/data/all_tests.csv ]; then
            echo "Analyzing for flaky tests..."
            sort dashboard/data/all_tests.csv | grep -v "^$" | awk -F, '{print $1","$2}' | sort | uniq -c | grep -v "^[[:space:]]*1 " | awk '{print $2}' | sort | uniq > dashboard/data/flaky_tests.csv
            FLAKY_TESTS=$(wc -l < dashboard/data/flaky_tests.csv | xargs)
          fi
          
          # Generate summary statistics
          cat > dashboard/data/summary.json << EOF
          {
            "total": $TOTAL_TESTS,
            "passed": $PASSED_TESTS,
            "failed": $FAILED_TESTS,
            "skipped": $SKIPPED_TESTS,
            "flaky": $FLAKY_TESTS,
            "date": "$(date -u +"%Y-%m-%d")",
            "time": "$(date -u +"%H:%M:%S")"
          }
          EOF
          
          echo "Generated test summary data"
          
      - name: Generate HTML dashboard
        run: |
          echo "Creating HTML dashboard..."
          
          # Create simple HTML dashboard
          cat > dashboard/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>HDR+ Swift Test Dashboard</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }
              h1 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
              .dashboard { display: flex; flex-wrap: wrap; gap: 20px; }
              .card { background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); padding: 20px; margin-bottom: 20px; flex: 1; min-width: 300px; }
              .summary { display: flex; gap: 15px; flex-wrap: wrap; }
              .stat { display: flex; flex-direction: column; align-items: center; padding: 15px; border-radius: 8px; min-width: 100px; }
              .stat-title { font-size: 14px; font-weight: bold; margin-bottom: 5px; }
              .stat-value { font-size: 24px; font-weight: bold; }
              .passed { background-color: #e6ffe6; color: #006600; }
              .failed { background-color: #ffe6e6; color: #cc0000; }
              .skipped { background-color: #e6e6ff; color: #000066; }
              .flaky { background-color: #fff2e6; color: #cc6600; }
              .total { background-color: #e6f7ff; color: #0066cc; }
              table { width: 100%; border-collapse: collapse; margin: 20px 0; }
              th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
              th { background-color: #f2f2f2; }
              tr:hover { background-color: #f5f5f5; }
              .status-pass { color: green; }
              .status-fail { color: red; }
              .status-skip { color: blue; }
            </style>
          </head>
          <body>
            <h1>HDR+ Swift Test Dashboard</h1>
            <div class="dashboard">
              <div class="card">
                <h2>Test Summary</h2>
                <div class="summary" id="summary">
                  <div class="stat total">
                    <div class="stat-title">Total Tests</div>
                    <div class="stat-value" id="total-tests">-</div>
                  </div>
                  <div class="stat passed">
                    <div class="stat-title">Passed</div>
                    <div class="stat-value" id="passed-tests">-</div>
                  </div>
                  <div class="stat failed">
                    <div class="stat-title">Failed</div>
                    <div class="stat-value" id="failed-tests">-</div>
                  </div>
                  <div class="stat skipped">
                    <div class="stat-title">Skipped</div>
                    <div class="stat-value" id="skipped-tests">-</div>
                  </div>
                  <div class="stat flaky">
                    <div class="stat-title">Flaky</div>
                    <div class="stat-value" id="flaky-tests">-</div>
                  </div>
                </div>
                <p>Last updated: <span id="last-updated">-</span></p>
              </div>
              
              <div class="card">
                <h2>Flaky Tests</h2>
                <div id="flaky-tests-list">Loading...</div>
              </div>
            </div>
            
            <div class="card">
              <h2>Recent Test Runs</h2>
              <div id="test-runs">Loading...</div>
            </div>
            
            <script>
              // Load summary data
              fetch('data/summary.json')
                .then(response => response.json())
                .then(data => {
                  document.getElementById('total-tests').textContent = data.total;
                  document.getElementById('passed-tests').textContent = data.passed;
                  document.getElementById('failed-tests').textContent = data.failed;
                  document.getElementById('skipped-tests').textContent = data.skipped;
                  document.getElementById('flaky-tests').textContent = data.flaky;
                  document.getElementById('last-updated').textContent = `${data.date} ${data.time} UTC`;
                })
                .catch(error => {
                  console.error('Error loading summary data:', error);
                });
              
              // Load flaky tests
              fetch('data/flaky_tests.csv')
                .then(response => response.text())
                .then(data => {
                  const lines = data.trim().split('\n');
                  if (lines.length === 0 || (lines.length === 1 && lines[0] === '')) {
                    document.getElementById('flaky-tests-list').innerHTML = '<p>No flaky tests detected in recent runs.</p>';
                    return;
                  }
                  
                  let html = '<ul>';
                  lines.forEach(line => {
                    if (line.trim() !== '') {
                      const [testName, status] = line.split(',');
                      html += `<li>${testName}</li>`;
                    }
                  });
                  html += '</ul>';
                  document.getElementById('flaky-tests-list').innerHTML = html;
                })
                .catch(error => {
                  console.error('Error loading flaky tests:', error);
                  document.getElementById('flaky-tests-list').innerHTML = '<p>Error loading flaky test data.</p>';
                });
              
              // Load recent test runs
              fetch('data/all_tests.csv')
                .then(response => response.text())
                .then(data => {
                  const lines = data.trim().split('\n');
                  if (lines.length === 0 || (lines.length === 1 && lines[0] === '')) {
                    document.getElementById('test-runs').innerHTML = '<p>No test data available.</p>';
                    return;
                  }
                  
                  // Process test data
                  const tests = lines.map(line => {
                    const [name, status, duration] = line.split(',');
                    return { name, status, duration: parseFloat(duration) };
                  });
                  
                  // Get unique test names
                  const testNames = [...new Set(tests.map(t => t.name))];
                  
                  // Create table
                  let html = '<table><thead><tr><th>Test Name</th><th>Status</th><th>Duration (ms)</th></tr></thead><tbody>';
                  
                  // Sort by test name
                  testNames.sort().forEach(name => {
                    const testRuns = tests.filter(t => t.name === name);
                    const latestRun = testRuns[testRuns.length - 1];
                    
                    const statusClass = 
                      latestRun.status === 'passed' ? 'status-pass' :
                      latestRun.status === 'failed' ? 'status-fail' : 'status-skip';
                    
                    html += `<tr>
                      <td>${name}</td>
                      <td class="${statusClass}">${latestRun.status}</td>
                      <td>${latestRun.duration.toFixed(2)}</td>
                    </tr>`;
                  });
                  
                  html += '</tbody></table>';
                  document.getElementById('test-runs').innerHTML = html;
                })
                .catch(error => {
                  console.error('Error loading test runs:', error);
                  document.getElementById('test-runs').innerHTML = '<p>Error loading test run data.</p>';
                });
            </script>
          </body>
          </html>
          EOF
          
          echo "HTML dashboard created"
          
      - name: Deploy dashboard to GitHub Pages
        run: |
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Create a new branch for the dashboard
          git checkout -b test-dashboard-updates
          
          # Create output directory if it doesn't exist
          mkdir -p test-dashboard
          
          # Copy dashboard files
          cp -r dashboard/* test-dashboard/
          
          # Add all changes
          git add test-dashboard/
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Commit changes
          git commit -m "test: update test results dashboard"
          
          # Force push to the branch
          git push -f origin test-dashboard-updates
          
          # Create or update PR using GitHub CLI
          PR_EXISTS=$(gh pr list --state open --head test-dashboard-updates --json number | jq 'length')
          
          if [ "$PR_EXISTS" -eq "0" ]; then
            # Create a new PR
            gh pr create --title "Test Dashboard Update" \
                         --body "This PR updates the Test Results Dashboard with the latest metrics. This is an automated PR created by the Test Dashboard workflow." \
                         --base main \
                         --head test-dashboard-updates \
                         --label "area/testing" \
                         --label "automated"
          else
            # Update existing PR
            echo "PR already exists, pushing updates only."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 