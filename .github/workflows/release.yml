name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. 1.2.3)'
        required: true
      pre-release:
        description: 'Mark as pre-release'
        type: boolean
        default: false
      draft:
        description: 'Create as draft release'
        type: boolean
        default: true

# Set explicit permissions needed for release creation
permissions:
  contents: write  # Needed to create releases and tags
  discussions: write  # If you use GitHub Discussions for release notes
  packages: write  # If you publish packages

# Prevent multiple release workflows from running simultaneously
concurrency:
  group: "release"
  cancel-in-progress: false  # Don't cancel releases in progress as they're critical

jobs:
  create-release:
    name: Create Release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Validate version format
        id: validate-version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # Check if version matches semantic versioning format
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "::error::Invalid version format. Please use semantic versioning (e.g. 1.2.3 or 1.2.3-beta.1)"
            exit 1
          fi
          
          # Extract version components
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3 | cut -d- -f1)
          
          # If pre-release tag exists, extract it
          if [[ $VERSION == *-* ]]; then
            PRERELEASE_TAG=$(echo $VERSION | cut -d- -f2-)
            echo "PRERELEASE_TAG=$PRERELEASE_TAG" >> $GITHUB_ENV
          fi
          
          # Output version components
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "PATCH=$PATCH" >> $GITHUB_ENV
          echo "Version components: $MAJOR.$MINOR.$PATCH"
      
      - name: Check for existing tag
        id: check-tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "::error::Tag v$VERSION already exists. Please choose a different version."
            exit 1
          fi
      
      - name: Set up Swift environment
        uses: ./.github/actions/optimized-swift-setup
        with:
          cache-name: 'release'
          
      - name: Generate changelog
        id: changelog
        uses: ./.github/actions/changelog-generator
        with:
          output-file: 'CHANGELOG.md'
          include-commit-body: 'true'
          
      - name: Extract version components
        id: version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          echo "MAJOR=$MAJOR" >> $GITHUB_OUTPUT
          echo "MINOR=$MINOR" >> $GITHUB_OUTPUT
          echo "PATCH=$PATCH" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=${MAJOR}${MINOR}${PATCH}" >> $GITHUB_OUTPUT
      
      - name: Build for Release
        run: |
          # Build for release
          xcodebuild build \
            -scheme HDRPlus \
            -configuration Release \
            -destination "platform=macOS" \
            MARKETING_VERSION="${{ github.event.inputs.version }}" \
            CURRENT_PROJECT_VERSION="${{ steps.version.outputs.BUILD_VERSION }}" \
            CODE_SIGNING_REQUIRED=NO
            
      - name: Package the application
        id: build-package
        run: |
          APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "*.app" -not -path "*/Archive/*" | head -1)
          
          if [[ -z "$APP_PATH" ]]; then
            echo "::error::Could not find built application"
            exit 1
          fi
          
          # Create ZIP archive
          cd "$(dirname "$APP_PATH")"
          APP_NAME=$(basename "$APP_PATH")
          ZIP_NAME="HDRPlus-${{ github.event.inputs.version }}.zip"
          
          echo "Creating ZIP archive of $APP_NAME as $ZIP_NAME"
          mkdir -p "$GITHUB_WORKSPACE/artifacts"
          ditto -c -k --keepParent "$APP_NAME" "$GITHUB_WORKSPACE/artifacts/$ZIP_NAME"
          
          cd "$GITHUB_WORKSPACE"
          echo "zip_path=artifacts/$ZIP_NAME" >> $GITHUB_OUTPUT
          
          # Create SHA256 checksums
          cd artifacts
          shasum -a 256 "$ZIP_NAME" > "$ZIP_NAME.sha256"
          
          echo "Artifacts created successfully:"
          ls -la "$GITHUB_WORKSPACE/artifacts/"
      
      - name: Create release tag
        id: create-tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          
          echo "Creating tag v$VERSION"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          
          # Don't push the tag yet - we'll do that after release creation
      
      - name: Create GitHub Release
        id: create-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read changelog
            let changelogContent;
            try {
              changelogContent = fs.readFileSync('CHANGELOG.md', 'utf8');
            } catch (error) {
              console.log('Error reading changelog:', error);
              changelogContent = 'No changelog available';
            }
            
            const version = '${{ github.event.inputs.version }}';
            const isDraft = ${{ github.event.inputs.draft }};
            const isPrerelease = ${{ github.event.inputs.pre-release }};
            
            // Create release
            console.log(`Creating ${isDraft ? 'draft ' : ''}${isPrerelease ? 'pre-release' : 'release'} v${version}`);
            
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `v${version}`,
              body: changelogContent,
              draft: isDraft,
              prerelease: isPrerelease,
              generate_release_notes: false
            });
            
            console.log(`Release created: ${release.data.html_url}`);
            return release.data;
              
      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ fromJSON(steps.create-release.outputs.result).id }}
        run: |
          echo "Uploading assets to release $RELEASE_ID"
          
          # Upload the zip file
          ZIP_PATH="${{ steps.build-package.outputs.zip_path }}"
          ZIP_NAME=$(basename "$ZIP_PATH")
          
          echo "Uploading $ZIP_PATH"
          gh release upload "v${{ github.event.inputs.version }}" "$ZIP_PATH" --clobber
          
          # Upload checksum file
          CHECKSUM_PATH="${{ steps.build-package.outputs.zip_path }}.sha256"
          if [ -f "$CHECKSUM_PATH" ]; then
            echo "Uploading $CHECKSUM_PATH"
            gh release upload "v${{ github.event.inputs.version }}" "$CHECKSUM_PATH" --clobber
          fi
      
      - name: Push Tag
        if: ${{ !github.event.inputs.draft }}
        run: |
          echo "Pushing tag to repository"
          git push origin "v${{ github.event.inputs.version }}"
      
      - name: Update CHANGELOG.md
        if: ${{ !github.event.inputs.draft }}
        run: |
          echo "Updating CHANGELOG.md in repository"
          
          # Check if file exists
          if [ -f "CHANGELOG.md" ]; then
            git add CHANGELOG.md
            git commit -m "docs: update CHANGELOG.md for v${{ github.event.inputs.version }}"
            git push origin HEAD:main
          fi 