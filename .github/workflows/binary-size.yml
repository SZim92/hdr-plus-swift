name: Binary Size Check

on:
  pull_request:
    paths:
      - '**.swift'
      - '**.h'
      - '**.m'
      - '**.mm'
      - '**/*.xcodeproj/**'
      - 'Package.swift'
      - '.github/workflows/binary-size.yml'
  push:
    branches:
      - main
    paths:
      - '**.swift'
      - '**.h'
      - '**.m'
      - '**.mm'
      - '**/*.xcodeproj/**'
      - 'Package.swift'
      - '.github/workflows/binary-size.yml'
  workflow_dispatch:

jobs:
  check-size:
    name: Check Binary Size
    runs-on: macos-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Swift
        run: |
          echo "Setting up Swift environment..."
          swift --version
      
      - name: Build simple representative app
        id: build-app
        run: |
          echo "Creating a simple app representative of binary size..."
          
          # Create a temporary directory for our build
          TEMP_BUILD_DIR=$(mktemp -d)
          echo "TEMP_BUILD_DIR=$TEMP_BUILD_DIR" >> $GITHUB_ENV
          
          # Count Swift and Objective-C files in the project to create size estimate
          SWIFT_COUNT=$(find . -name "*.swift" | wc -l)
          OBJC_COUNT=$(find . -name "*.m" -o -name "*.mm" | wc -l)
          
          echo "Project has approximately $SWIFT_COUNT Swift files and $OBJC_COUNT Objective-C files"
          
          # Create a simple Swift app bundle to analyze
          mkdir -p "$TEMP_BUILD_DIR/DummyApp.app/Contents/MacOS"
          
          # Create a simple representative executable based on the file counts
          # This is just an approximation for size comparison over time
          cat > size_estimate.swift << EOF
          import Foundation
          
          // This file creates a representative binary for size analysis
          // It doesn't need to run - just needs to have similar binary characteristics
          
          // Create structures similar to what would be in the real app
          struct ImageProcessor {
              var buffer: [UInt8]
              var width: Int
              var height: Int
              
              func process() -> [UInt8] {
                  return buffer
              }
          }
          
          // Generate dummy code to approximate the app's size
          func generateCode() {
              var data: [UInt8] = []
              
              // Simulate the app's code volume
              for i in 0..<10000 {
                  data.append(UInt8(i % 256))
              }
              
              let processor = ImageProcessor(buffer: data, width: 100, height: 100)
              _ = processor.process()
          }
          
          // Main function
          func main() {
              generateCode()
              print("App would process images here")
          }
          
          main()
          EOF
          
          # Compile the simple file
          swiftc -O size_estimate.swift -o "$TEMP_BUILD_DIR/DummyApp.app/Contents/MacOS/DummyApp"
          
          # Create basic Info.plist
          cat > "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>DummyApp</string>
              <key>CFBundleIdentifier</key>
              <string>org.example.DummyApp</string>
              <key>CFBundleName</key>
              <string>DummyApp</string>
              <key>CFBundleVersion</key>
              <string>1.0</string>
          </dict>
          </plist>
          EOF
          
          echo "Created representative app at $TEMP_BUILD_DIR/DummyApp.app"
          echo "app_path=$TEMP_BUILD_DIR/DummyApp.app" >> $GITHUB_OUTPUT
      
      - name: Analyze binary size
        id: size-analysis
        run: |
          # Use the dummy app path
          APP_PATH="${{ steps.build-app.outputs.app_path }}"
          
          echo "Analyzing app at: $APP_PATH"
          
          # Get app size
          APP_SIZE=$(du -sk "$APP_PATH" | cut -f1)
          APP_SIZE_MB=$(echo "scale=2; $APP_SIZE/1024" | bc)
          
          echo "App size: $APP_SIZE_MB MB"
          
          # Get executable size
          EXECUTABLE="$APP_PATH/Contents/MacOS/DummyApp"
          if [ -f "$EXECUTABLE" ]; then
            EXEC_SIZE=$(du -sk "$EXECUTABLE" | cut -f1)
            EXEC_SIZE_KB=$EXEC_SIZE
            echo "Executable size: $EXEC_SIZE_KB KB"
          else
            echo "Warning: Could not find executable in app bundle"
          fi
          
          # Output sizes to summary
          echo "## Binary Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| App Bundle | $APP_SIZE_MB MB |" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "$EXECUTABLE" ]; then
            echo "| Main Executable | $EXEC_SIZE_KB KB |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Save size for threshold check
          echo "app_size=$APP_SIZE" >> $GITHUB_OUTPUT
          
          # Create a report of actual Swift files for reference
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Project Code Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Type | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Swift | $(find . -name "*.swift" | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Objective-C | $(find . -name "*.m" -o -name "*.mm" | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Headers | $(find . -name "*.h" | wc -l) |" >> $GITHUB_STEP_SUMMARY
      
      - name: Check size threshold
        run: |
          MAX_SIZE_KB=100000  # 100MB threshold, adjust as needed
          CURRENT_SIZE=${{ steps.size-analysis.outputs.app_size }}
          
          echo "Current app size: $CURRENT_SIZE KB"
          echo "Maximum allowed size: $MAX_SIZE_KB KB"
          
          if [ $CURRENT_SIZE -gt $MAX_SIZE_KB ]; then
            echo "::error::App size ($CURRENT_SIZE KB) exceeds maximum allowed size ($MAX_SIZE_KB KB)"
            exit 1
          else
            echo "App size is within acceptable limits"
          fi
      
      - name: Compare with previous build
        if: github.event_name == 'pull_request'
        run: |
          echo "Comparing app size with base branch..."
          # This would ideally compare with a previous build size stored as an artifact
          # For now, we just report the current size
          echo "Note: Size comparison with previous build not implemented yet." 