name: Binary Size Check

on:
  pull_request:
    paths:
      - '**.swift'
      - '**.h'
      - '**.m'
      - '**.mm'
      - '**/*.xcodeproj/**'
      - 'Package.swift'
      - '.github/workflows/binary-size.yml'
  push:
    branches:
      - main
    paths:
      - '**.swift'
      - '**.h'
      - '**.m'
      - '**.mm'
      - '**/*.xcodeproj/**'
      - 'Package.swift'
      - '.github/workflows/binary-size.yml'
  workflow_dispatch:  # Allow manual triggering

# Ensure we don't run multiple workflows on the same branch at the same time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-size:
    name: Check Binary Size
    runs-on: macos-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Swift
        run: |
          echo "Setting up Swift environment..."
          swift --version
      
      - name: Build simple representative app
        id: build-app
        run: |
          echo "Creating a simple app representative of binary size..."
          
          # Create a temporary directory for our build
          TEMP_BUILD_DIR=$(mktemp -d)
          echo "TEMP_BUILD_DIR=$TEMP_BUILD_DIR" >> $GITHUB_ENV
          
          # Count Swift and Objective-C files in the project to create size estimate
          SWIFT_COUNT=$(find . -name "*.swift" | wc -l)
          OBJC_COUNT=$(find . -name "*.m" -o -name "*.mm" | wc -l)
          
          # Create a variable without spaces for Swift code generation
          SWIFT_COUNT_NO_SPACES=$(echo $SWIFT_COUNT | tr -d ' ')
          
          echo "Project has approximately $SWIFT_COUNT Swift files and $OBJC_COUNT Objective-C files"
          
          # Create a simple Swift app bundle to analyze
          mkdir -p "$TEMP_BUILD_DIR/DummyApp.app/Contents/MacOS"
          
          # Create a simple representative executable based on the file counts
          # This is just an approximation for size comparison over time
          echo "import Foundation" > size_estimate.swift
          echo "" >> size_estimate.swift
          echo "// This file creates a representative binary for size analysis" >> size_estimate.swift
          echo "// It doesn't need to run - just needs to have similar binary characteristics" >> size_estimate.swift
          echo "" >> size_estimate.swift
          echo "// Simulate the size impact of $SWIFT_COUNT_NO_SPACES Swift files" >> size_estimate.swift
          echo "func main() {" >> size_estimate.swift
          echo "    // Add some data structures to simulate app complexity" >> size_estimate.swift
          echo "    var data: [String: Any] = [:]" >> size_estimate.swift
          echo "    " >> size_estimate.swift
          echo "    // Add entries based on file count to simulate complexity" >> size_estimate.swift
          echo "    for i in 0..<$SWIFT_COUNT_NO_SPACES {" >> size_estimate.swift
          echo "        data[\"key_\\\\(i)\"] = \"This is simulating source file \\\\(i) impact on binary size\"" >> size_estimate.swift
          echo "    }" >> size_estimate.swift
          echo "    " >> size_estimate.swift
          echo "    // Create some structures to simulate app models" >> size_estimate.swift
          echo "    struct Model {" >> size_estimate.swift
          echo "        let id: Int" >> size_estimate.swift
          echo "        let name: String" >> size_estimate.swift
          echo "        let value: Double" >> size_estimate.swift
          echo "    }" >> size_estimate.swift
          echo "    " >> size_estimate.swift
          echo "    // Create array of models" >> size_estimate.swift
          echo "    var models: [Model] = []" >> size_estimate.swift
          echo "    for i in 0..<min($SWIFT_COUNT_NO_SPACES, 100) {" >> size_estimate.swift
          echo "        models.append(Model(id: i, name: \"Item \\\\(i)\", value: Double(i) * 1.5))" >> size_estimate.swift
          echo "    }" >> size_estimate.swift
          echo "    " >> size_estimate.swift
          echo "    // Print something to avoid optimization removing everything" >> size_estimate.swift
          echo "    print(\"Generated model with \\\\(models.count) items and \\\\(data.count) dictionary entries\")" >> size_estimate.swift
          echo "}" >> size_estimate.swift
          echo "" >> size_estimate.swift
          echo "main()" >> size_estimate.swift
          
          # Compile the simple file
          echo "Compiling size estimate file..."
          # Retry compilation up to 3 times
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Compilation attempt $attempt of $max_attempts"
            if swiftc -O size_estimate.swift -o "$TEMP_BUILD_DIR/DummyApp.app/Contents/MacOS/DummyApp"; then
              echo "Compilation successful"
              break
            else
              echo "Compilation failed"
              if [ $attempt -lt $max_attempts ]; then
                echo "Retrying in 3 seconds..."
                sleep 3
              else
                echo "Could not compile after $max_attempts attempts"
                exit 1
              fi
              attempt=$((attempt+1))
            fi
          done
          
          # Create basic Info.plist
          echo '<?xml version="1.0" encoding="UTF-8"?>' > "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '<plist version="1.0">' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '<dict>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <key>CFBundleExecutable</key>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <string>DummyApp</string>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <key>CFBundleIdentifier</key>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <string>com.example.dummyapp</string>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <key>CFBundleVersion</key>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <string>1.0</string>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <key>CFBundleShortVersionString</key>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <string>1.0</string>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '</dict>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '</plist>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          
          echo "Created representative app at $TEMP_BUILD_DIR/DummyApp.app"
          echo "app_path=$TEMP_BUILD_DIR/DummyApp.app" >> $GITHUB_OUTPUT
      
      - name: Analyze binary size
        id: size-analysis
        run: |
          # Use the dummy app path
          APP_PATH="${{ steps.build-app.outputs.app_path }}"
          
          echo "Analyzing app at: $APP_PATH"
          
          # Get app size
          APP_SIZE=$(du -sk "$APP_PATH" | cut -f1)
          APP_SIZE_MB=$(echo "scale=2; $APP_SIZE/1024" | bc)
          
          echo "App size: $APP_SIZE_MB MB"
          
          # Get executable size
          EXECUTABLE="$APP_PATH/Contents/MacOS/DummyApp"
          if [ -f "$EXECUTABLE" ]; then
            EXEC_SIZE=$(du -sk "$EXECUTABLE" | cut -f1)
            EXEC_SIZE_KB=$EXEC_SIZE
            echo "Executable size: $EXEC_SIZE_KB KB"
          else
            echo "Warning: Could not find executable in app bundle"
          fi
          
          # Output sizes to summary
          echo "## Binary Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| App Bundle | $APP_SIZE_MB MB |" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "$EXECUTABLE" ]; then
            echo "| Main Executable | $EXEC_SIZE_KB KB |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Save size for threshold check
          echo "app_size=$APP_SIZE" >> $GITHUB_OUTPUT
          
          # Create a report of actual Swift files for reference
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Project Code Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Type | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Swift | $(find . -name "*.swift" | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Objective-C | $(find . -name "*.m" -o -name "*.mm" | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Headers | $(find . -name "*.h" | wc -l) |" >> $GITHUB_STEP_SUMMARY
      
      - name: Check size threshold
        run: |
          MAX_SIZE_KB=100000  # 100MB threshold, adjust as needed
          CURRENT_SIZE=${{ steps.size-analysis.outputs.app_size }}
          
          echo "Current app size: $CURRENT_SIZE KB"
          echo "Maximum allowed size: $MAX_SIZE_KB KB"
          
          if [ $CURRENT_SIZE -gt $MAX_SIZE_KB ]; then
            echo "::error::App size ($CURRENT_SIZE KB) exceeds maximum allowed size ($MAX_SIZE_KB KB)"
            exit 1
          else
            echo "App size is within acceptable limits"
          fi
      
      - name: Compare with previous build
        if: github.event_name == 'pull_request'
        run: |
          echo "Comparing app size with base branch..."
          # This would ideally compare with a previous build size stored as an artifact
          # For now, we just report the current size
          echo "Note: Size comparison with previous build not implemented yet." 