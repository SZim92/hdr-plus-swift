name: Binary Size Check

on:
  pull_request:
    paths:
      - '**.swift'
      - '**.h'
      - '**.m'
      - '**.mm'
      - '**.metal'
      - '**/*.xcodeproj/**'
      - 'Package.swift'
      - '.github/workflows/binary-size.yml'
  push:
    branches:
      - main
    paths:
      - '**.swift'
      - '**.h'
      - '**.m'
      - '**.mm'
      - '**.metal'
      - '**/*.xcodeproj/**'
      - 'Package.swift'
      - '.github/workflows/binary-size.yml'
  workflow_dispatch:  # Allow manual triggering

# Ensure we don't run multiple workflows on the same branch at the same time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-size:
    name: Check Binary Size
    runs-on: macos-latest
    timeout-minutes: 30  # Set timeout to 30 minutes for binary size check
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Swift
        uses: ./.github/actions/optimized-swift-setup
        with:
          cache-name: 'binary-size'
          disable-code-signing: 'true'
      
      - name: Build simple representative app
        id: build-app
        run: |
          echo "Creating a simple app representative of binary size..."
          
          # Create a temporary directory for our build
          TEMP_BUILD_DIR=$(mktemp -d)
          echo "TEMP_BUILD_DIR=$TEMP_BUILD_DIR" >> $GITHUB_ENV
          
          # Count Swift and Objective-C files in the project to create size estimate
          SWIFT_COUNT=$(find . -name "*.swift" | wc -l)
          OBJC_COUNT=$(find . -name "*.m" -o -name "*.mm" | wc -l)
          
          # Create a variable without spaces for Swift code generation
          SWIFT_COUNT_NO_SPACES=$(echo $SWIFT_COUNT | tr -d ' ')
          
          echo "Project has approximately $SWIFT_COUNT Swift files and $OBJC_COUNT Objective-C files"
          
          # Create a simple Swift app bundle to analyze
          mkdir -p "$TEMP_BUILD_DIR/DummyApp.app/Contents/MacOS"
          
          # Create a simple representative executable based on the file counts
          # This is just an approximation for size comparison over time
          echo "import Foundation" > size_estimate.swift
          echo "" >> size_estimate.swift
          echo "// This file creates a representative binary for size analysis" >> size_estimate.swift
          echo "// It doesn't need to run - just needs to have similar binary characteristics" >> size_estimate.swift
          echo "" >> size_estimate.swift
          echo "// Simulate the size impact of $SWIFT_COUNT_NO_SPACES Swift files" >> size_estimate.swift
          echo "func main() {" >> size_estimate.swift
          echo "    // Add some data structures to simulate app complexity" >> size_estimate.swift
          echo "    var data: [String: Any] = [:]" >> size_estimate.swift
          echo "    " >> size_estimate.swift
          echo "    // Add entries based on file count to simulate complexity" >> size_estimate.swift
          echo "    for i in 0..<$SWIFT_COUNT_NO_SPACES {" >> size_estimate.swift
          echo "        data[\"key_\\\\(i)\"] = \"This is simulating source file \\\\(i) impact on binary size\"" >> size_estimate.swift
          echo "    }" >> size_estimate.swift
          echo "    " >> size_estimate.swift
          echo "    // Create some structures to simulate app models" >> size_estimate.swift
          echo "    struct Model {" >> size_estimate.swift
          echo "        let id: Int" >> size_estimate.swift
          echo "        let name: String" >> size_estimate.swift
          echo "        let value: Double" >> size_estimate.swift
          echo "    }" >> size_estimate.swift
          echo "    " >> size_estimate.swift
          echo "    // Create array of models" >> size_estimate.swift
          echo "    var models: [Model] = []" >> size_estimate.swift
          echo "    for i in 0..<min($SWIFT_COUNT_NO_SPACES, 100) {" >> size_estimate.swift
          echo "        models.append(Model(id: i, name: \"Item \\\\(i)\", value: Double(i) * 1.5))" >> size_estimate.swift
          echo "    }" >> size_estimate.swift
          echo "    " >> size_estimate.swift
          echo "    // Print something to avoid optimization removing everything" >> size_estimate.swift
          echo "    print(\"Generated model with \\\\(models.count) items and \\\\(data.count) dictionary entries\")" >> size_estimate.swift
          echo "}" >> size_estimate.swift
          echo "" >> size_estimate.swift
          echo "main()" >> size_estimate.swift
          
          # Compile the simple file
          echo "Compiling size estimate file..."
          # Retry compilation up to 3 times
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Compilation attempt $attempt of $max_attempts"
            if swiftc -O size_estimate.swift -o "$TEMP_BUILD_DIR/DummyApp.app/Contents/MacOS/DummyApp"; then
              echo "Compilation successful"
              break
            else
              echo "Compilation failed"
              if [ $attempt -lt $max_attempts ]; then
                echo "Retrying in 3 seconds..."
                sleep 3
              else
                echo "Could not compile after $max_attempts attempts"
                exit 1
              fi
              attempt=$((attempt+1))
            fi
          done
          
          # Create basic Info.plist
          echo '<?xml version="1.0" encoding="UTF-8"?>' > "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '<plist version="1.0">' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '<dict>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <key>CFBundleExecutable</key>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <string>DummyApp</string>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <key>CFBundleIdentifier</key>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <string>com.example.dummyapp</string>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <key>CFBundleVersion</key>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <string>1.0</string>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <key>CFBundleShortVersionString</key>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '    <string>1.0</string>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '</dict>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          echo '</plist>' >> "$TEMP_BUILD_DIR/DummyApp.app/Contents/Info.plist"
          
          echo "Created representative app at $TEMP_BUILD_DIR/DummyApp.app"
          echo "app_path=$TEMP_BUILD_DIR/DummyApp.app" >> $GITHUB_OUTPUT
      
      - name: Analyze binary size
        id: size-analysis
        run: |
          # Use the dummy app path
          APP_PATH="${{ steps.build-app.outputs.app_path }}"
          
          echo "Analyzing app at: $APP_PATH"
          
          # Get app size
          APP_SIZE=$(du -sk "$APP_PATH" | cut -f1)
          APP_SIZE_MB=$(echo "scale=2; $APP_SIZE/1024" | bc)
          
          echo "App size: $APP_SIZE_MB MB"
          
          # Get executable size
          EXECUTABLE="$APP_PATH/Contents/MacOS/DummyApp"
          if [ -f "$EXECUTABLE" ]; then
            EXEC_SIZE=$(du -sk "$EXECUTABLE" | cut -f1)
            EXEC_SIZE_KB=$EXEC_SIZE
            echo "Executable size: $EXEC_SIZE_KB KB"
          else
            echo "Warning: Could not find executable in app bundle"
          fi
          
          # Output sizes to summary
          echo "## Binary Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| App Bundle | $APP_SIZE_MB MB |" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "$EXECUTABLE" ]; then
            echo "| Main Executable | $EXEC_SIZE_KB KB |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Save size for threshold check
          echo "app_size=$APP_SIZE" >> $GITHUB_OUTPUT
          
          # Create a report of actual Swift files for reference
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Project Code Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Type | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Swift | $(find . -name "*.swift" | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Objective-C | $(find . -name "*.m" -o -name "*.mm" | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Headers | $(find . -name "*.h" | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Metal | $(find . -name "*.metal" | wc -l) |" >> $GITHUB_STEP_SUMMARY
      
      - name: Check size threshold
        run: |
          MAX_SIZE_KB=100000  # 100MB threshold, adjust as needed
          CURRENT_SIZE=${{ steps.size-analysis.outputs.app_size }}
          
          echo "Current app size: $CURRENT_SIZE KB"
          echo "Maximum allowed size: $MAX_SIZE_KB KB"
          
          if [ $CURRENT_SIZE -gt $MAX_SIZE_KB ]; then
            echo "::error::App size ($CURRENT_SIZE KB) exceeds maximum allowed size ($MAX_SIZE_KB KB)"
            exit 1
          else
            echo "App size is within acceptable limits"
          fi
      
      - name: Compare with previous build
        if: github.event_name == 'pull_request'
        run: |
          echo "Comparing app size with base branch..."
          # This would ideally compare with a previous build size stored as an artifact
          # For now, we just report the current size
          echo "Note: Size comparison with previous build not implemented yet."

  # New job to analyze Metal shader performance
  metal-performance:
    name: Metal Shader Metrics
    runs-on: macos-latest
    # Only run if Metal files are changed or on manual trigger
    if: github.event_name == 'workflow_dispatch' || contains(github.event.pull_request.labels.*.name, 'area/metal')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Add Metal shader compilation cache
      - name: Cache Metal shaders
        uses: actions/cache@v4
        with:
          path: .metal-cache
          key: metal-perf-${{ runner.os }}-${{ hashFiles('**/*.metal') }}
          restore-keys: |
            metal-perf-${{ runner.os }}-
      
      - name: Set up Swift environment
        run: |
          chmod +x .github/scripts/setup-swift-env.sh
          ./.github/scripts/setup-swift-env.sh 'metal-performance' 'false' 'true' 'false' 'performance'
      
      - name: Find Metal shader files
        id: find-shaders
        run: |
          # Find all Metal shader files in the repo
          SHADER_FILES=$(find . -name "*.metal" -type f | sort)
          
          if [ -z "$SHADER_FILES" ]; then
            echo "No Metal shader files found. Skipping performance analysis."
            echo "has_shaders=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Found $(echo "$SHADER_FILES" | wc -l | xargs) Metal shader files"
          
          # Save list of shader files for performance analysis
          mkdir -p metal-performance
          echo "$SHADER_FILES" > metal-performance/shader-files.txt
          
          echo "has_shaders=true" >> $GITHUB_OUTPUT
      
      - name: Analyze Metal shader size and compilation time
        if: steps.find-shaders.outputs.has_shaders == 'true'
        run: |
          echo "Analyzing Metal shader size and compilation metrics..."
          
          # Create results directories
          mkdir -p metal-performance/results
          
          # Read shader files
          SHADER_FILES=$(cat metal-performance/shader-files.txt)
          
          # Create results table header
          echo "| Shader | Source Size (KB) | AIR Size (KB) | Compilation Time (ms) |" > metal-performance/results/metrics.md
          echo "|--------|-----------------|--------------|---------------------|" >> metal-performance/results/metrics.md
          
          # Track overall metrics
          TOTAL_SOURCE_SIZE=0
          TOTAL_AIR_SIZE=0
          TOTAL_COMPILE_TIME=0
          MAX_COMPILE_TIME=0
          MAX_COMPILE_SHADER=""
          
          # For each shader file, measure size and compilation time
          for shader in $SHADER_FILES; do
            shader_name=$(basename "$shader")
            echo "Analyzing shader: $shader_name"
            
            # Get shader source size
            SOURCE_SIZE=$(du -k "$shader" | cut -f1)
            TOTAL_SOURCE_SIZE=$((TOTAL_SOURCE_SIZE + SOURCE_SIZE))
            
            # Measure compilation time (in milliseconds)
            START_TIME=$(($(date +%s%N)/1000000))
            
            # Compile the shader to AIR file
            xcrun -sdk macosx metal -c "$shader" -o "metal-performance/results/${shader_name}.air" -std=metal2.0
            
            END_TIME=$(($(date +%s%N)/1000000))
            COMPILE_TIME=$((END_TIME - START_TIME))
            TOTAL_COMPILE_TIME=$((TOTAL_COMPILE_TIME + COMPILE_TIME))
            
            # Track maximum compilation time
            if [ $COMPILE_TIME -gt $MAX_COMPILE_TIME ]; then
              MAX_COMPILE_TIME=$COMPILE_TIME
              MAX_COMPILE_SHADER="$shader_name"
            fi
            
            # Get compiled AIR file size
            if [ -f "metal-performance/results/${shader_name}.air" ]; then
              AIR_SIZE=$(du -k "metal-performance/results/${shader_name}.air" | cut -f1)
              TOTAL_AIR_SIZE=$((TOTAL_AIR_SIZE + AIR_SIZE))
            else
              AIR_SIZE="N/A"
            fi
            
            # Add to results table
            echo "| $shader_name | $SOURCE_SIZE | $AIR_SIZE | $COMPILE_TIME |" >> metal-performance/results/metrics.md
          done
          
          # Create summary
          SHADER_COUNT=$(echo "$SHADER_FILES" | wc -l)
          SHADER_COUNT=$(echo $SHADER_COUNT | xargs)  # Trim whitespace
          AVG_COMPILE_TIME=$(echo "scale=2; $TOTAL_COMPILE_TIME / $SHADER_COUNT" | bc)
          
          echo "# Metal Shader Performance Metrics" > metal-performance/summary.md
          echo "" >> metal-performance/summary.md
          echo "Analysis performed on: $(date)" >> metal-performance/summary.md
          echo "" >> metal-performance/summary.md
          echo "## Summary" >> metal-performance/summary.md
          echo "" >> metal-performance/summary.md
          echo "| Metric | Value |" >> metal-performance/summary.md
          echo "|--------|-------|" >> metal-performance/summary.md
          echo "| Total Shaders | $SHADER_COUNT |" >> metal-performance/summary.md
          echo "| Total Source Size | $TOTAL_SOURCE_SIZE KB |" >> metal-performance/summary.md
          echo "| Total Compiled Size | $TOTAL_AIR_SIZE KB |" >> metal-performance/summary.md
          echo "| Average Compilation Time | $AVG_COMPILE_TIME ms |" >> metal-performance/summary.md
          echo "| Slowest Shader | $MAX_COMPILE_SHADER ($MAX_COMPILE_TIME ms) |" >> metal-performance/summary.md
          echo "" >> metal-performance/summary.md
          
          # Add detailed metrics
          echo "## Detailed Metrics" >> metal-performance/summary.md
          echo "" >> metal-performance/summary.md
          cat metal-performance/results/metrics.md >> metal-performance/summary.md
          
          # Add performance optimization recommendations
          echo "" >> metal-performance/summary.md
          echo "## Optimization Recommendations" >> metal-performance/summary.md
          echo "" >> metal-performance/summary.md
          
          if [ $MAX_COMPILE_TIME -gt 1000 ]; then
            echo "🔍 **Review $MAX_COMPILE_SHADER** - This shader takes over 1 second to compile and may impact build times" >> metal-performance/summary.md
          fi
          
          # Add shader complexity recommendation if any AIR file is much larger than source
          for shader in $SHADER_FILES; do
            shader_name=$(basename "$shader")
            if [ -f "metal-performance/results/${shader_name}.air" ]; then
              SOURCE_SIZE=$(du -k "$shader" | cut -f1)
              AIR_SIZE=$(du -k "metal-performance/results/${shader_name}.air" | cut -f1)
              
              # If AIR is more than 5x the source size, flag it
              if [ $AIR_SIZE -gt $((SOURCE_SIZE * 5)) ] && [ $SOURCE_SIZE -gt 0 ]; then
                echo "⚠️ **$shader_name complexity** - The compiled AIR file is $(echo "scale=1; $AIR_SIZE / $SOURCE_SIZE" | bc)x larger than the source, indicating high complexity" >> metal-performance/summary.md
              fi
            fi
          done
          
          # Add general recommendations
          echo "- Consider precompiling shaders for release builds to improve app startup time" >> metal-performance/summary.md
          echo "- Use shader function specialization for frequently used shaders with constant parameters" >> metal-performance/summary.md
          echo "- If possible, combine similar shaders using #if directives instead of maintaining separate shader files" >> metal-performance/summary.md
          
          # Add summary to GitHub step summary
          cat metal-performance/summary.md >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Metal performance results
        if: steps.find-shaders.outputs.has_shaders == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: metal-performance-metrics
          path: metal-performance/
          retention-days: 14
          
      - name: Comment on PR with performance metrics
        if: github.event_name == 'pull_request' && steps.find-shaders.outputs.has_shaders == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            try {
              const summaryContent = fs.readFileSync('metal-performance/summary.md', 'utf8');
              
              // Create comment body
              let body = `## Metal Shader Performance Analysis\n\n`;
              
              // Extract just the Summary section to keep the comment concise
              const summarySection = summaryContent.split('## Summary')[1].split('##')[0].trim();
              body += summarySection + '\n\n';
              
              // Add a note about the slowest shader if it's mentioned in the recommendations
              if (summaryContent.includes('shader takes over 1 second to compile')) {
                const slowestShaderLine = summaryContent.split('🔍 **Review')[1].split('\n')[0].trim();
                body += `### Performance Concern\n\n🔍 **Review${slowestShaderLine}\n\n`;
              }
              
              body += `*See the "metal-performance-metrics" artifact for full details.*`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
              
              console.log('Posted Metal performance metrics to PR');
            } catch (error) {
              console.error('Error posting Metal performance metrics:', error);
            } 