name: 'Optimized Swift Setup'
description: 'Sets up Swift environment with optimized caching for macOS CI'

inputs:
  cache-name:
    description: 'Name for the cache'
    required: false
    default: 'default'
  disable-code-signing:
    description: 'Whether to disable code signing for CI builds'
    required: false
    default: 'true'
  install-swiftlint:
    description: 'Whether to install SwiftLint'
    required: false
    default: 'false'
  use-retry:
    description: 'Whether to use retry strategy for flaky builds'
    required: false
    default: 'false'

outputs:
  setup-time:
    description: 'The time it took to set up Swift environment in seconds'
    value: ${{ steps.timing.outputs.setup-time }}
  swift-version:
    description: 'The Swift version used'
    value: ${{ steps.swift-check.outputs.swift-version }}
  xcode-version:
    description: 'The Xcode version used'
    value: ${{ steps.xcode-check.outputs.xcode-version }}
  cache-hit:
    description: 'Whether the cache was hit'
    value: ${{ steps.swift-cache.outputs.cache-hit == 'true' || steps.brew-cache.outputs.cache-hit == 'true' }}
  swift-cache-hit:
    description: 'Whether the Swift cache was hit'
    value: ${{ steps.swift-cache.outputs.cache-hit }}
  brew-cache-hit:
    description: 'Whether the Homebrew cache was hit'
    value: ${{ steps.brew-cache.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Start timing setup
      id: timing
      shell: bash
      run: echo "start=$(date +%s)" >> $GITHUB_OUTPUT
      
    - name: Check Xcode installation
      id: xcode-check
      shell: bash
      run: |
        echo "::group::Xcode Check"
        XCODE_VERSION=$(xcodebuild -version | head -n 1 | awk '{print $2}')
        echo "Xcode version: $XCODE_VERSION"
        echo "xcode-version=$XCODE_VERSION" >> $GITHUB_OUTPUT
        echo "::endgroup::"
        
    - name: Check Swift installation
      id: swift-check
      shell: bash
      run: |
        echo "::group::Swift Check"
        SWIFT_VERSION=$(swift --version | head -n 1 | awk '{print $4}')
        echo "Swift version: $SWIFT_VERSION"
        echo "swift-version=$SWIFT_VERSION" >> $GITHUB_OUTPUT
        echo "::endgroup::"
    
    # IMPROVED CACHING STRATEGY
    - name: Swift Dependency Cache
      id: swift-cache
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
          .build
          .derivedData
        key: ${{ runner.os }}-swift-${{ inputs.cache-name }}-${{ hashFiles('**/Package.resolved', '**/*.xcodeproj/project.pbxproj', '**/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-swift-${{ inputs.cache-name }}-
          ${{ runner.os }}-swift-
   
    - name: Homebrew Cache
      id: brew-cache
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Caches/Homebrew
          /usr/local/Homebrew
        key: ${{ runner.os }}-brew-${{ hashFiles('**/Brewfile') || inputs.cache-name }}
        
    - name: Install SwiftLint if needed
      if: inputs.install-swiftlint == 'true'
      shell: bash
      run: |
        echo "::group::SwiftLint Setup"
        if ! command -v swiftlint &> /dev/null; then
          echo "Installing SwiftLint"
          brew install swiftlint
        else
          echo "SwiftLint already installed"
          swiftlint --version
        fi
        echo "::endgroup::"
    
    - name: Optimize DerivedData Location
      if: steps.swift-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "::group::DerivedData Optimization"
        echo "Optimizing DerivedData folder location..."
        
        # Create optimized DerivedData location
        mkdir -p .derivedData
        defaults write com.apple.dt.Xcode IDECustomDerivedDataLocation "$(pwd)/.derivedData"
        
        # Use shared DerivedData directory
        defaults write com.apple.dt.Xcode IDEDerivedDataLocationStyle Custom
        
        echo "DerivedData location set to $(pwd)/.derivedData"
        echo "::endgroup::"
        
    - name: Disable code signing if requested
      if: inputs.disable-code-signing == 'true'
      shell: bash
      run: |
        echo "::group::Code Signing Configuration"
        echo "Disabling code signing for CI build..."
        
        # Disable code signing via defaults
        defaults write com.apple.dt.Xcode IDESkipCodeSigningVerification -bool YES
        
        # Set environment variables for this and future steps
        echo "EXPANDED_CODE_SIGN_IDENTITY=-" >> $GITHUB_ENV
        echo "EXPANDED_CODE_SIGN_IDENTITY_NAME=-" >> $GITHUB_ENV
        echo "CODE_SIGNING_REQUIRED=NO" >> $GITHUB_ENV
        echo "CODE_SIGNING_ALLOWED=NO" >> $GITHUB_ENV
        
        echo "Code signing disabled"
        echo "::endgroup::"
        
    - name: Report Cache Status
      id: cache-report
      shell: bash
      run: |
        echo "::group::Cache Status"
        echo "Swift Cache: ${{ steps.swift-cache.outputs.cache-hit == 'true' && 'HIT ✅' || 'MISS ❌' }}"
        echo "Brew Cache: ${{ steps.brew-cache.outputs.cache-hit == 'true' && 'HIT ✅' || 'MISS ❌' }}"
        echo "::endgroup::"
        
    - name: Complete timing setup
      id: timing-end
      shell: bash
      run: |
        END_TIME=$(date +%s)
        START_TIME=${{ steps.timing.outputs.start }}
        SETUP_TIME=$((END_TIME - START_TIME))
        echo "setup-time=$SETUP_TIME" >> $GITHUB_OUTPUT
        echo "Swift environment setup completed in $SETUP_TIME seconds" 